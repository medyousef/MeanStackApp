import { Component, Input, NgZone, ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';
import { d3 } from '../d3service';
import { defualtLookAndFeel, GraphicContext, offsetScaleValue } from './hbox-plot.dom';
import { BoxUtil } from '../hbox-utils/box-util';
import { BD2ColorPalette } from '../hbox-utils/color-palette';
import { SmartRounder } from '../hbox-utils/smart-rounding';
export class HBoxPlotComponent {
    constructor(ngZone, changeDetectorRef, element) {
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * Necessary to control hiding of the element, otherwise the BBoxes are not defined and labels
         * were not rendered in correct places.
         *
         */
        this.hidden = false;
        this.removed = [];
        this.domain = [17, 36];
        this.palette = [];
        this.labels = [];
        this.labelsOn = 'always'; // trigger //null
        this.lookAndFeel = defualtLookAndFeel();
        this.sortChanged = false;
        this.colors = new EventEmitter();
        this.graphicContext = new GraphicContext();
        this.boxUtil = new BoxUtil();
        this.sortFunction = function (b1, b2) {
            return b1.ix - b2.ix;
        };
        this.d3 = d3;
        this.parentNativeElement = element.nativeElement;
    }
    set sorted(sorting) {
        if (sorting === 'median') {
            this.sortFunction = (b1, b2) => b1.median - b2.median;
        }
        else if (sorting === 'label') {
            // console.log("N",navigator.language);
            /*if (navigator.language) {
             this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) =>
             b1.label.localeCompare(b2.label, navigator.language, {sensitivity: 'case'});
             } else {
             this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) => b1.label.localeCompare(b2.label);
             };*/
            this.sortFunction = (b1, b2) => {
                if (b1.label === b2.label) {
                    return 0;
                }
                if (b1.label < b2.label) {
                    return -1;
                }
                return 1;
            };
        }
        else {
            this.sortFunction = (b1, b2) => b1.ix - b2.ix;
        }
    }
    /**
     * It is detached from angular to prevent unnecessary change detection
     */
    ngAfterViewInit() {
        this.changeDetectorRef.detach();
        // console.log("AFI");
    }
    /**
     * Explicit triggers re-drawing as need to have all the parameters set (so will not redrawn if data came frist and domain later)
     * @param changes
     */
    ngOnChanges(changes) {
        // console.log("Changes", changes);
        // otherwise the hidden on inner div was not updated
        this.changeDetectorRef.detectChanges();
        this.initSVG();
        // this.handleHiding();
        if (!this.data) {
            return;
        }
        this.sortChanged = changes.sorted !== undefined;
        if (!this.hidden) {
            this.updatePlot();
        }
    }
    isDataUpdate(changes) {
        return (changes.data || changes.removed || changes.domain || changes.palette || changes.labels);
    }
    initSVG() {
        if (!this.d3Svg) {
            const d3ParentElement = this.d3.select(this.parentNativeElement);
            this.d3Svg = d3ParentElement.select('.hbox-plot').append('svg');
            this.d3Svg.attr('width', '0');
        }
    }
    ngOnInit() {
        if (this.parentNativeElement !== null) {
        }
        else {
            console.error('Missing parrent element for the component');
        }
    }
    ngOnDestroy() {
        if (this.d3Svg && this.d3Svg.empty && !this.d3Svg.empty()) {
            this.d3Svg.selectAll('*').remove();
        }
    }
    /**
     * Only for testing
     * @param context
     */
    testGraphicContext(context) {
        this.graphicContext = context;
    }
    /* Not needed any more, the hidding is achieved by simple div hidden attribute
     // and the problem with labels background rendering is solved using delayed rendering with a timer.
     handleHiding() {
     if (this.hidden) {
     this.removed = this.d3Svg.remove();
     } else {
     if (this.removed) {
     this.d3.select(this.parentNativeElement)
     .select('.hbox-plot')
     .append(() => this.d3Svg.node());
     this.removed = undefined;
     }
     }
  
     }*/
    updatePlot() {
        // this.graphicContext.transitionTime = this.lookAndFeel.transitionTime;
        if (this.lookAndFeel.transitionTime > 0) {
            this.graphicContext.transitionOn = true;
            this.ngZone.runOutsideAngular(() => {
                this.graphicContext.transition = this.d3.transition().duration(this.lookAndFeel.transitionTime);
            });
        }
        else {
            this.graphicContext.transitionOn = false;
            this.graphicContext.transition = undefined;
        }
        this.graphicContext = this.updatePalette(this.data, this.palette, this.graphicContext);
        let boxes = this.prepareDataModel(this.data, this.removed, this.labels, this.graphicContext.palette, this.domain, this.sortFunction);
        boxes = boxes.filter(b => !b.hidden);
        this.graphicContext = this.preparePane(boxes, this.lookAndFeel, this.graphicContext);
        this.graphicContext = this.prepareScales(boxes, this.domain, this.lookAndFeel, this.graphicContext);
        this.graphicContext = this.plotAxisBox(boxes, this.domain, this.lookAndFeel, this.mainPane, this.graphicContext);
        this.graphicContext = this.plotDataBoxes(boxes, this.lookAndFeel, this.mainPane, this.graphicContext);
        this.graphicContext = this.prepareTooltip(this.mainPane, this.graphicContext);
        this.graphicContext = this.prepareLabels(boxes, this.mainPane, this.lookAndFeel, this.graphicContext, this.labelsOn);
    }
    prepareDataModel(data, removed, labels, palette, domain, sortFunction) {
        let boxes = this.boxUtil.dataToBoxes(data);
        this.boxUtil.mockEmptyValues(boxes, domain[1]);
        this.labelBoxes(boxes, labels);
        this.colorBoxes(boxes, palette);
        removed.forEach(ix => {
            if (boxes[ix]) {
                boxes[ix].hidden = true;
            }
        });
        boxes = boxes.sort(sortFunction);
        return boxes;
    }
    updatePalette(data, palette, graphicContext) {
        if (!palette || palette.length === 0) {
            graphicContext.palette = BD2ColorPalette.palette(data.length);
        }
        else {
            graphicContext.palette = BD2ColorPalette.extendPalette(palette, data.length);
        }
        this.colors.next(graphicContext.palette.slice());
        return graphicContext;
    }
    colorBoxes(boxes, palette) {
        boxes.forEach(b => b.color = palette[b.ix]);
    }
    preparePane(data, lookAndFeel, graphicContext) {
        // console.log("PP",data);
        if (!this.mainPane) {
            // let d3ParentElement = this.d3.select(this.parentNativeElement);
            // this.d3Svg = d3ParentElement.select('.hbox-plot').append<SVGSVGElement>('svg');
            this.d3Svg.attr('width', '100%');
            this.mainPane = this.d3Svg.append('g');
            this.mainPane.classed('mainPane', true);
        }
        const pWidth = 500;
        const pHeight = this.calculateWorkspaceHeight(data, lookAndFeel) + 2 * lookAndFeel.vMargin;
        const elm = (graphicContext.transitionOn ? this.d3Svg.transition(graphicContext.transition) : this.d3Svg);
        elm.attr('viewBox', '0 0 ' + pWidth + ' ' + pHeight);
        this.mainPane.attr('transform', 'translate(' + lookAndFeel.hMarginL + ',' + lookAndFeel.vMargin + ')');
        // .attr('transform', 'translate(' + (pWidth / 2) + ',' + (pHeight / 2) + ')'); //moves 0,0 of the pain to the middle of the graphics
        graphicContext.workspaceWidth = pWidth - lookAndFeel.hMarginL - lookAndFeel.hMarginR;
        graphicContext.workspaceHeight = pHeight - 2 * lookAndFeel.vMargin;
        return graphicContext;
    }
    calculateWorkspaceHeight(data, lookAndFeel) {
        return lookAndFeel.rowWidth * data.length;
    }
    labelBoxes(boxes, labels) {
        if (!labels) {
            labels = [];
        }
        boxes.forEach((b, ix) => {
            b.label = labels[ix] ? labels[ix] : '' + (ix + 1);
        });
    }
    prepareLabels(boxes, mainPane, lookAndFeel, graphicContext, labelsOn) {
        if (!graphicContext.labelsWrapper) {
            graphicContext.labelsWrapper = mainPane.append('g')
                .classed('labelsWrapper', true);
        }
        if (!graphicContext.backLabelsWrapper) {
            graphicContext.backLabelsWrapper = mainPane.insert('g', 'g.dataWrapper')
                .classed('backLabelsWrapper', true);
        }
        const backLabelsOn = labelsOn === 'always';
        const mainLabelsOn = labelsOn === 'always' || labelsOn === 'trigger';
        const labels = graphicContext.labelsWrapper.selectAll('g.yLabel')
            .data(mainLabelsOn ? boxes : [], (d) => d.key);
        labels.exit().remove();
        const newLabels = labels.enter()
            .append('g')
            .classed('yLabel', true);
        this.ngZone.runOutsideAngular(() => {
            newLabels.on('mouseover', function (evnt, d) {
                d3.select(this)
                    .selectAll('.yLabel')
                    // .style("visibility", "visible");
                    .style('display', null);
            }).on('mouseout', function () {
                d3.select(this)
                    .selectAll('.yLabel')
                    // .style("visibility", "hidden");
                    .style('display', 'none');
            });
        });
        newLabels.append('rect')
            .attr('class', 'yTrigger')
            .style('fill-opacity', 1);
        newLabels.append('rect')
            .attr('class', 'yLabel')
            .style('fill-opacity', 0.35)
            // .style("visibility", "hidden");
            .style('display', 'none');
        newLabels.append('text')
            .attr('class', 'yLabel')
            .attr('text-anchor', 'left')
            .attr('dominant-baseline', 'central')
            .style('font-size', lookAndFeel.labelFont)
            .style('opacity', 1)
            .attr('x', 5);
        const backLabels = graphicContext.backLabelsWrapper.selectAll('g.yLabel')
            .data(backLabelsOn ? boxes : [], (d) => d.key);
        backLabels.exit().remove();
        const newBackLabels = backLabels.enter()
            .append('g')
            .classed('yLabel', true);
        /*
         newBackLabels.append<SVGGElement>("rect")
         .attr("class", "yLabel")
         .style("fill-opacity", 0.05);
         */
        newBackLabels.append('text')
            .attr('class', 'yLabel')
            .attr('text-anchor', 'left')
            .attr('dominant-baseline', 'central')
            .style('font-size', lookAndFeel.labelFont)
            .style('opacity', lookAndFeel.backLabelOpacity)
            .attr('x', 5);
        // .style("visibility", "hidden");
        const enterUpdate = newLabels.merge(labels);
        const backEnterUpdate = newBackLabels.merge(backLabels);
        // called with delay to allow, parent divs to component sets their visibility, otherwise the bboxes cannot be calculated
        // and the labels backgrounds and trigers are not rendered correctly
        // it is a hack, but don't know how to do it correctly
        // timers have to be cleared as otherwise saw errors in logs for fast changing input data (like cause by sorting and pagination)
        graphicContext.labelsTimers.forEach(timer => clearTimeout(timer));
        graphicContext.labelsTimers = [];
        const timer = setTimeout(() => {
            const bboxes = [];
            enterUpdate.select('text')
                .style('display', null)
                .attr('y', d => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)
                .text(d => d.label)
                .each(function (d) {
                bboxes.push(this.getBBox());
                // console.log("D: " + d.label, this.getBBox());
            })
                .style('display', 'none');
            let elm = backEnterUpdate.select('text');
            elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
            elm
                .attr('y', d => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)
                .text(d => d.label);
            const trigers = enterUpdate.select('.yTrigger')
                .style('fill', d => d.color)
                .style('stroke', d => d.color);
            let telm = trigers.data(bboxes);
            telm = (graphicContext.transitionOn ? telm.transition(graphicContext.transition) : telm);
            telm
                .attr('x', -7)
                .attr('y', b => b.y - 3)
                .attr('width', b => 7)
                .attr('height', b => b.height + 6);
            const frames = enterUpdate.select('rect.yLabel')
                .style('fill', d => d.color)
                .style('fill-opacity', lookAndFeel.labelFillOpacity);
            frames.data(bboxes)
                .attr('x', 0)
                .attr('y', b => b.y - 3)
                .attr('width', b => b.width + 10)
                .attr('height', b => b.height + 7);
            /*
             let backFrames = backEnterUpdate.select<SVGSVGElement>("rect.yLabel")
             .style("fill", d => d.color);
      
             backFrames.data(bboxes)
             .attr("x", 0)
             .attr("y", b => b.y - 3)
             .attr("width", b => b.width + 10)
             .attr("height", b => b.height + 7);
             */
        }, 10);
        graphicContext.labelsTimers.push(timer);
        return graphicContext;
    }
    prepareTooltip(mainPane, graphicContext) {
        if (graphicContext.tooltipWrapper) {
            return graphicContext;
        }
        graphicContext.tooltipWrapper = mainPane.append('g')
            .classed('tooltipWrapper', true);
        graphicContext.tooltipBox = graphicContext.tooltipWrapper.append('rect')
            .style('fill', 'white')
            .style('fill-opacity', 0.8)
            .style('stroke', 'grey');
        graphicContext.tooltipText = graphicContext.tooltipWrapper.append('text')
            .attr('class', 'tooltip')
            // .attr("text-anchor", "left")
            .attr('text-anchor', 'middle')
            // .attr("alignment-baseline", "middle")
            // .attr("alignment-baseline", "baseline")
            // .attr("dy", "-10px")
            .style('opacity', 1);
        graphicContext.tooltipWrapper
            // .style("visibility", "hidden");
            .style('display', 'none');
        return graphicContext;
    }
    showTooltip(v, x, y) {
        // console.log("Show: " + v + ";" + this.constructor.name);
        // console.log('Show: ' + v + '; ' + x + ': ' + y);
        // console.log('v', SmartRounder.round(v));
        // console.log('x', this.graphicContext.xScale(x));
        // console.log('y', this.graphicContext.yScale(y));
        if (!this.graphicContext.tooltipText) {
            return;
        }
        this.graphicContext.tooltipText
            .attr('x', this.graphicContext.xScale(x))
            .attr('y', this.graphicContext.yScale(y))
            .text(SmartRounder.round(v));
        // I have to change the display here even before the box is ready as
        // in firefox the getBBox was not working if called with display none
        // giving NS_ERROR_FAILURE 2147500037
        this.graphicContext.tooltipWrapper
            // .style("visibility", "visible");
            .style('display', null);
        const bbox = this.graphicContext.tooltipText.node().getBBox();
        this.graphicContext.tooltipBox
            .attr('x', bbox.x - 3)
            .attr('y', bbox.y - 2)
            .attr('width', bbox.width + 6)
            .attr('height', bbox.height + 4);
    }
    hideTooltip() {
        // console.log("Hide: ");
        if (!this.graphicContext.tooltipText) {
            return;
        }
        this.graphicContext.tooltipWrapper
            // .style("visibility", "hidden");
            .style('display', 'none');
        // this.graphicContext.tooltipText
        // .transition().duration(this.lookAndFeel.baseTransitionsTime / 2)
        // .style("opacity", 0);
    }
    prepareScales(data, domain, lookAndFeel, graphicContext) {
        if (!graphicContext.xScale) {
            graphicContext.xScale = d3.scaleLinear()
                .clamp(true);
        }
        graphicContext.xScale
            .domain(domain)
            .range([0, graphicContext.workspaceWidth]);
        if (!graphicContext.yScale) {
            graphicContext.yScale = d3.scaleBand()
                .padding(lookAndFeel.rowGap);
        }
        const domainY = data.map((d) => d.key);
        graphicContext.yScale
            .domain(domainY)
            .range([0, graphicContext.workspaceHeight]);
        return graphicContext;
    }
    plotAxisBox(data, domain, lookAndFeel, mainPane, graphicContext) {
        if (!graphicContext.axisWrapper) {
            graphicContext.axisWrapper = this.initAxisWrapper(mainPane);
        }
        graphicContext = this.plotHorizontalScales(domain, lookAndFeel, graphicContext);
        graphicContext = this.plotVerticalScales(data, lookAndFeel, graphicContext);
        return graphicContext;
    }
    initAxisWrapper(mainPane) {
        let wrapper = mainPane.select('.axisWrapper');
        if (wrapper.size() === 0) {
            wrapper = mainPane.append('g').attr('class', 'axisWrapper');
            wrapper.append('g').attr('class', 'xTopAxis');
            wrapper.append('g').attr('class', 'xBottomAxis');
            wrapper.append('g').attr('class', 'yLeftAxis');
            wrapper.append('g').attr('class', 'yRightAxis');
        }
        return wrapper;
    }
    plotHorizontalScales(domain, lookAndFeel, graphicContext) {
        if (!graphicContext.xTopAxis) {
            graphicContext.xTopAxis = d3.axisTop(graphicContext.xScale);
        }
        if (!graphicContext.xBottomAxis) {
            graphicContext.xBottomAxis = d3.axisBottom(graphicContext.xScale);
        }
        graphicContext.axisWrapper
            .select('g.xTopAxis')
            .call(graphicContext.xTopAxis);
        let elm = graphicContext.axisWrapper.select('g.xBottomAxis');
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('transform', 'translate(0,' + graphicContext.workspaceHeight + ')')
            .call(graphicContext.xBottomAxis);
        return graphicContext;
    }
    plotVerticalScales(data, lookAndFeel, graphicContext) {
        if (!graphicContext.yLeftAxis) {
            graphicContext.yLeftAxis = d3.axisLeft(graphicContext.yScale)
                .tickFormat(() => '');
        }
        if (!graphicContext.yRightAxis) {
            graphicContext.yRightAxis = d3.axisRight(graphicContext.yScale)
                .tickValues([]);
        }
        let elm = graphicContext.axisWrapper.select('g.yLeftAxis');
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .call(graphicContext.yLeftAxis);
        elm = graphicContext.axisWrapper.select('g.yRightAxis')
            .attr('transform', 'translate(' + graphicContext.workspaceWidth + ',0)');
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .call(graphicContext.yRightAxis);
        return graphicContext;
    }
    plotDataBoxes(boxes, lookAndFeel, mainPane, graphicContext) {
        if (!graphicContext.dataWrapper) {
            graphicContext.dataWrapper = mainPane.append('g').attr('class', 'dataWrapper');
        }
        let boxWidgets = graphicContext.dataWrapper.selectAll('.boxWidget');
        boxWidgets = boxWidgets.data(boxes, d => d.key);
        this.updateBoxWidgets(boxWidgets, lookAndFeel, graphicContext);
        const newBoxWidgets = boxWidgets.enter()
            .append('g').attr('class', 'boxWidget');
        this.createBoxWidgets(newBoxWidgets, lookAndFeel, graphicContext);
        boxWidgets.exit().remove();
        return graphicContext;
    }
    updateBoxWidgets(boxWidgets, lookAndFeel, graphicContext) {
        // this.ngZone.runOutsideAngular(() => {
        boxWidgets.select('rect.backdrop')
            .call(this.positionBackdrop, graphicContext);
        this.updateWhiskers(boxWidgets.select('g.whiskers'), graphicContext);
        boxWidgets.select('g.box rect')
            .call(this.positionBoxRectangle, graphicContext);
        boxWidgets.select('g.box line.medianline')
            .call(this.positionMedianLine, graphicContext);
        boxWidgets.select('g.box line.meanline')
            .call(this.positionMeanLine, graphicContext);
        const out = boxWidgets.select('g.outliers').selectAll('.outlier')
            .data(d => d.outliers.map(x => [x, d.key, d.color]));
        out.enter()
            .call(this.createOutlier, lookAndFeel, graphicContext, this.positionOutlier);
        out.call(this.positionOutlier, graphicContext);
        out.exit().remove();
        // });
    }
    positionBackdrop(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x', (d) => offsetScaleValue(d.lowWskr, -5, graphicContext.xScale))
            .attr('y', (d) => {
            return graphicContext.yScale(d.key);
        })
            .attr('width', (d) => {
            const x1 = offsetScaleValue(d.lowWskr, -5, graphicContext.xScale);
            const x2 = offsetScaleValue(d.highWskr, +5, graphicContext.xScale);
            return x2 - x1;
        })
            .attr('height', (d) => {
            return graphicContext.yScale.bandwidth();
        });
    }
    positionBoxRectangle(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x', (d) => graphicContext.xScale(d.fstQnt))
            .attr('y', (d) => {
            return graphicContext.yScale(d.key);
        })
            .attr('width', (d) => (graphicContext.xScale(d.thrdQnt) - graphicContext.xScale(d.fstQnt)))
            .attr('height', (d) => {
            return graphicContext.yScale.bandwidth();
        })
            .style('stroke', d => d.color)
            .style('fill', d => d.color);
    }
    positionMedianLine(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x1', (d, i) => graphicContext.xScale(d.median))
            .attr('y1', (d, i) => graphicContext.yScale(d.key))
            .attr('x2', (d, i) => graphicContext.xScale(d.median))
            .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())
            .style('stroke', d => d.color)
            // .style("visibility", d => d.mean === d.median ? "hidden" : "visible");
            .style('display', d => d.mean === d.median ? 'none' : null);
    }
    positionMeanLine(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x1', (d, i) => graphicContext.xScale(d.mean))
            .attr('y1', (d, i) => graphicContext.yScale(d.key))
            .attr('x2', (d, i) => graphicContext.xScale(d.mean))
            .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())
            .style('stroke', d => d.color);
    }
    positionOutlier(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm.attr('cx', d => graphicContext.xScale(d[0]))
            .attr('cy', d => graphicContext.yScale(d[1]) + graphicContext.yScale.bandwidth() / 2)
            .style('stroke', d => d[2])
            .style('fill', d => d[2]);
    }
    createOutlier(elm, lookAndFeel, graphicContext, positionOutlierFunction) {
        elm
            .append('circle')
            .attr('class', 'outlier')
            .attr('r', lookAndFeel.outliersCircleRadius)
            .style('stroke-width', lookAndFeel.outliersStrokeWidth)
            .style('fill-opacity', lookAndFeel.outliersFillOpacity)
            .call(positionOutlierFunction, graphicContext);
    }
    positionWhiskerLine(elm, left, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x1', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.thrdQnt))
            .attr('y1', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)
            .attr('x2', (d, i) => left ? graphicContext.xScale(d.fstQnt) : graphicContext.xScale(d.highWskr))
            .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)
            .style('stroke', d => d.color)
            // .style("visibility", d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? "hidden" : "visible");
            .style('display', d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? 'none' : null);
    }
    positionWhiskerTip(elm, left, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x1', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.highWskr))
            .attr('y1', (d, i) => graphicContext.yScale(d.key))
            .attr('x2', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.highWskr))
            .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())
            .style('stroke', d => d.color)
            // .style("visibility", d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? "hidden" : "visible");
            .style('display', d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? 'none' : null);
    }
    updateWhiskers(whiskers, graphicContext) {
        whiskers.select('line.whiskerlineL')
            .call(this.positionWhiskerLine, true, graphicContext);
        whiskers.select('line.whiskerlineR')
            .call(this.positionWhiskerLine, false, graphicContext);
        whiskers.select('line.whiskertipL')
            .call(this.positionWhiskerTip, true, graphicContext);
        whiskers.select('line.whiskertipR')
            .call(this.positionWhiskerTip, false, graphicContext);
    }
    createWhiskers(whiskers, lookAndFeel, graphicContext) {
        const lwhiskr = whiskers.append('line')
            .attr('class', 'whiskerlineL')
            .style('stroke-width', lookAndFeel.whiskerStrokeWidth)
            .style('stroke-dasharray', '4 3')
            .call(this.positionWhiskerLine, true, graphicContext);
        const rwhiskr = whiskers.append('line')
            .attr('class', 'whiskerlineR')
            .style('stroke-width', lookAndFeel.whiskerStrokeWidth)
            .style('stroke-dasharray', '4 3')
            .call(this.positionWhiskerLine, false, graphicContext);
        const lTip = whiskers.append('line')
            .attr('class', 'whiskertipL')
            .style('stroke-width', lookAndFeel.whiskerStrokeWidth)
            .call(this.positionWhiskerTip, true, graphicContext);
        const rTip = whiskers.append('line')
            .attr('class', 'whiskertipR')
            .style('stroke-width', lookAndFeel.whiskerStrokeWidth)
            .call(this.positionWhiskerTip, false, graphicContext);
    }
    createBoxes(widgets, lookAndFeel, graphicContext) {
        const rect = widgets.append('rect')
            .attr('class', 'box')
            .style('stroke-width', lookAndFeel.boxStrokeWidth)
            .style('fill-opacity', lookAndFeel.boxFillOpacity)
            .call(this.positionBoxRectangle, graphicContext);
        const median = widgets.append('line')
            .attr('class', 'medianline')
            .style('stroke-width', lookAndFeel.boxStrokeWidth)
            .call(this.positionMedianLine, graphicContext);
        const instance = this;
        this.ngZone.runOutsideAngular(() => {
            rect.on('mouseover', function (evnt, d) {
                instance.showTooltip(d.median, d.median, d.key);
            })
                .on('mouseout', function () {
                instance.hideTooltip();
            });
            median.on('mouseover', function (evnt, d) {
                instance.showTooltip(d.median, d.median, d.key);
            })
                .on('mouseout', function () {
                instance.hideTooltip();
            });
        });
        const mean = widgets
            .append('line')
            .attr('class', 'meanline')
            .style('stroke-width', lookAndFeel.meanStrokeWidth)
            .style('stroke-dasharray', '4 2')
            .call(this.positionMeanLine, graphicContext);
        // has to be outside angular, to prevent detection
        this.ngZone.runOutsideAngular(() => {
            mean
                .on('mouseover', function (evnt, d) {
                instance.showTooltip(d.mean, d.mean, d.key);
            })
                .on('mouseout', function () {
                instance.hideTooltip();
            });
        });
    }
    createBoxWidgets(newBoxWidgets, lookAndFeel, graphicContext) {
        // this.ngZone.runOutsideAngular(() => {
        const instance = this;
        const backdrops = newBoxWidgets.append('rect').attr('class', 'backdrop')
            // .style("stroke-width", lookAndFeel.boxStrokeWidth)
            .style('fill-opacity', lookAndFeel.backdropOpacity)
            .style('fill', lookAndFeel.backdropColor)
            .call(this.positionBackdrop, graphicContext);
        const whiskers = newBoxWidgets.append('g').attr('class', 'whiskers');
        this.createWhiskers(whiskers, lookAndFeel, graphicContext);
        const boxes = newBoxWidgets.append('g').attr('class', 'box');
        this.createBoxes(boxes, lookAndFeel, graphicContext);
        const outliers = newBoxWidgets.append('g').attr('class', 'outliers');
        outliers.selectAll('.outlier')
            .data(d => d.outliers.map(x => [x, d.key, d.color]))
            .enter()
            .call(this.createOutlier, lookAndFeel, graphicContext, this.positionOutlier);
        // });
    }
}
HBoxPlotComponent.decorators = [
    { type: Component, args: [{
                selector: 'bd2-ngx-hbox-plot',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div class="hbox-plot" [hidden]="hidden"></div>
  `,
                styles: [`
      :host /deep/ .axisWrapper path {
        stroke: gray;
      }

      :host /deep/ .axisWrapper line {
        stroke: gray;
      }

      :host /deep/ .axisWrapper text {
        fill: gray;
      }
    `]
            },] }
];
HBoxPlotComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
HBoxPlotComponent.propDecorators = {
    hidden: [{ type: Input }],
    data: [{ type: Input }],
    removed: [{ type: Input }],
    domain: [{ type: Input }],
    palette: [{ type: Input }],
    labels: [{ type: Input }],
    labelsOn: [{ type: Input }],
    lookAndFeel: [{ type: Input }],
    sorted: [{ type: Input }],
    colors: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGJveC1wbG90LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JkMi1uZ3gtaGJveHBsb3Qvc3JjL2xpYi9oYm94LXBsb3QvaGJveC1wbG90LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUFVLEtBQUssRUFBdUMsTUFBTSxFQUFFLGlCQUFpQixFQUN4RixVQUFVLEVBQWlCLHVCQUF1QixFQUFFLFlBQVksRUFBRSxNQUFNLEVBQ3pFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBSyxFQUFFLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFHcEMsT0FBTyxFQUFDLGtCQUFrQixFQUFFLGNBQWMsRUFBZSxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRWxHLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBNEIxRCxNQUFNLE9BQU8saUJBQWlCO0lBZ0Y1QixZQUFvQixNQUFjLEVBQVUsaUJBQW9DLEVBQUUsT0FBbUI7UUFBakYsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUE5RWhGOzs7O1dBSUc7UUFFSCxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBT2YsWUFBTyxHQUFhLEVBQUUsQ0FBQztRQUd2QixXQUFNLEdBQWEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFHNUIsWUFBTyxHQUFhLEVBQUUsQ0FBQztRQUd2QixXQUFNLEdBQWEsRUFBRSxDQUFDO1FBR3RCLGFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxpQkFBaUI7UUFHdEMsZ0JBQVcsR0FBRyxrQkFBa0IsRUFBRSxDQUFDO1FBOEJuQyxn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LFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxRQUFRLEVBQUU7O0dBRVQ7eUJBRUc7Ozs7Ozs7Ozs7OztLQVlEO2FBRUo7OztZQXJDZ0UsTUFBTTtZQUFFLGlCQUFpQjtZQUN4RixVQUFVOzs7cUJBNENULEtBQUs7bUJBSUwsS0FBSztzQkFHTCxLQUFLO3FCQUdMLEtBQUs7c0JBR0wsS0FBSztxQkFHTCxLQUFLO3VCQUdMLEtBQUs7MEJBR0wsS0FBSztxQkFHTCxLQUFLO3FCQThCTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBOZ1pvbmUsIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBFdmVudEVtaXR0ZXIsIE91dHB1dFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0QzLCBkM30gZnJvbSAnLi4vZDNzZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tICdkMyc7XHJcbmltcG9ydCB7ZGVmdWFsdExvb2tBbmRGZWVsLCBHcmFwaGljQ29udGV4dCwgTG9va0FuZEZlZWwsIG9mZnNldFNjYWxlVmFsdWV9IGZyb20gJy4vaGJveC1wbG90LmRvbSc7XHJcbmltcG9ydCB7Qm94RGVmaW5pdGlvbn0gZnJvbSAnLi4vaGJveC11dGlscy9ib3gtZG9tJztcclxuaW1wb3J0IHtCb3hVdGlsfSBmcm9tICcuLi9oYm94LXV0aWxzL2JveC11dGlsJztcclxuaW1wb3J0IHtCRDJDb2xvclBhbGV0dGV9IGZyb20gJy4uL2hib3gtdXRpbHMvY29sb3ItcGFsZXR0ZSc7XHJcbmltcG9ydCB7U21hcnRSb3VuZGVyfSBmcm9tICcuLi9oYm94LXV0aWxzL3NtYXJ0LXJvdW5kaW5nJztcclxuXHJcblxyXG5cclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2JkMi1uZ3gtaGJveC1wbG90JyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImhib3gtcGxvdFwiIFtoaWRkZW5dPVwiaGlkZGVuXCI+PC9kaXY+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtcclxuICAgICAgYFxyXG4gICAgICA6aG9zdCAvZGVlcC8gLmF4aXNXcmFwcGVyIHBhdGgge1xyXG4gICAgICAgIHN0cm9rZTogZ3JheTtcclxuICAgICAgfVxyXG5cclxuICAgICAgOmhvc3QgL2RlZXAvIC5heGlzV3JhcHBlciBsaW5lIHtcclxuICAgICAgICBzdHJva2U6IGdyYXk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIDpob3N0IC9kZWVwLyAuYXhpc1dyYXBwZXIgdGV4dCB7XHJcbiAgICAgICAgZmlsbDogZ3JheTtcclxuICAgICAgfVxyXG4gICAgYFxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEhCb3hQbG90Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIE5lY2Vzc2FyeSB0byBjb250cm9sIGhpZGluZyBvZiB0aGUgZWxlbWVudCwgb3RoZXJ3aXNlIHRoZSBCQm94ZXMgYXJlIG5vdCBkZWZpbmVkIGFuZCBsYWJlbHNcclxuICAgKiB3ZXJlIG5vdCByZW5kZXJlZCBpbiBjb3JyZWN0IHBsYWNlcy5cclxuICAgKlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgaGlkZGVuID0gZmFsc2U7XHJcblxyXG5cclxuICBASW5wdXQoKVxyXG4gIGRhdGE6IG51bWJlcltdW107XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcmVtb3ZlZDogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgQElucHV0KClcclxuICBkb21haW46IG51bWJlcltdID0gWzE3LCAzNl07XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcGFsZXR0ZTogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgQElucHV0KClcclxuICBsYWJlbHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgbGFiZWxzT24gPSAnYWx3YXlzJzsgLy8gdHJpZ2dlciAvL251bGxcclxuXHJcbiAgQElucHV0KClcclxuICBsb29rQW5kRmVlbCA9IGRlZnVhbHRMb29rQW5kRmVlbCgpO1xyXG5cclxuICBASW5wdXQoKSAvLyBtZWRpYW4sIGxhYmVsLCBudWxsXHJcbiAgc2V0IHNvcnRlZChzb3J0aW5nOiBzdHJpbmcpIHtcclxuXHJcbiAgICBpZiAoc29ydGluZyA9PT0gJ21lZGlhbicpIHtcclxuICAgICAgdGhpcy5zb3J0RnVuY3Rpb24gPSAoYjE6IEJveERlZmluaXRpb24sIGIyOiBCb3hEZWZpbml0aW9uKSA9PiBiMS5tZWRpYW4gLSBiMi5tZWRpYW47XHJcbiAgICB9IGVsc2UgaWYgKHNvcnRpbmcgPT09ICdsYWJlbCcpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coXCJOXCIsbmF2aWdhdG9yLmxhbmd1YWdlKTtcclxuICAgICAgLyppZiAobmF2aWdhdG9yLmxhbmd1YWdlKSB7XHJcbiAgICAgICB0aGlzLnNvcnRGdW5jdGlvbiA9IChiMTogQm94RGVmaW5pdGlvbiwgYjI6IEJveERlZmluaXRpb24pID0+XHJcbiAgICAgICBiMS5sYWJlbC5sb2NhbGVDb21wYXJlKGIyLmxhYmVsLCBuYXZpZ2F0b3IubGFuZ3VhZ2UsIHtzZW5zaXRpdml0eTogJ2Nhc2UnfSk7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgdGhpcy5zb3J0RnVuY3Rpb24gPSAoYjE6IEJveERlZmluaXRpb24sIGIyOiBCb3hEZWZpbml0aW9uKSA9PiBiMS5sYWJlbC5sb2NhbGVDb21wYXJlKGIyLmxhYmVsKTtcclxuICAgICAgIH07Ki9cclxuICAgICAgdGhpcy5zb3J0RnVuY3Rpb24gPSAoYjE6IEJveERlZmluaXRpb24sIGIyOiBCb3hEZWZpbml0aW9uKSA9PiB7XHJcbiAgICAgICAgaWYgKGIxLmxhYmVsID09PSBiMi5sYWJlbCkge1xyXG4gICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiMS5sYWJlbCA8IGIyLmxhYmVsKSB7XHJcbiAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zb3J0RnVuY3Rpb24gPSAoYjE6IEJveERlZmluaXRpb24sIGIyOiBCb3hEZWZpbml0aW9uKSA9PiBiMS5peCAtIGIyLml4O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIHNvcnRDaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIGNvbG9ycyA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nW10+KCk7XHJcblxyXG4gIHByaXZhdGUgZDM6IEQzO1xyXG4gIHByaXZhdGUgcGFyZW50TmF0aXZlRWxlbWVudDogYW55O1xyXG4gIHByaXZhdGUgZDNTdmc6IFNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD47XHJcbiAgLy8gcHJpdmF0ZSByZW1vdmVkU1ZHOiBTZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+O1xyXG5cclxuICBwcml2YXRlIG1haW5QYW5lOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPjtcclxuXHJcbiAgcHJpdmF0ZSBncmFwaGljQ29udGV4dCA9IG5ldyBHcmFwaGljQ29udGV4dCgpO1xyXG4gIHByaXZhdGUgYm94VXRpbCA9IG5ldyBCb3hVdGlsKCk7XHJcblxyXG4gIHNvcnRGdW5jdGlvbiA9IGZ1bmN0aW9uKGIxOiBCb3hEZWZpbml0aW9uLCBiMjogQm94RGVmaW5pdGlvbikge1xyXG4gICAgcmV0dXJuIGIxLml4IC0gYjIuaXg7XHJcbiAgfTtcclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50OiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLmQzID0gZDM7XHJcbiAgICB0aGlzLnBhcmVudE5hdGl2ZUVsZW1lbnQgPSBlbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSXQgaXMgZGV0YWNoZWQgZnJvbSBhbmd1bGFyIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgY2hhbmdlIGRldGVjdGlvblxyXG4gICAqL1xyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0YWNoKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIkFGSVwiKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cGxpY2l0IHRyaWdnZXJzIHJlLWRyYXdpbmcgYXMgbmVlZCB0byBoYXZlIGFsbCB0aGUgcGFyYW1ldGVycyBzZXQgKHNvIHdpbGwgbm90IHJlZHJhd24gaWYgZGF0YSBjYW1lIGZyaXN0IGFuZCBkb21haW4gbGF0ZXIpXHJcbiAgICogQHBhcmFtIGNoYW5nZXNcclxuICAgKi9cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coXCJDaGFuZ2VzXCIsIGNoYW5nZXMpO1xyXG5cclxuICAgIC8vIG90aGVyd2lzZSB0aGUgaGlkZGVuIG9uIGlubmVyIGRpdiB3YXMgbm90IHVwZGF0ZWRcclxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG5cclxuXHJcbiAgICB0aGlzLmluaXRTVkcoKTtcclxuXHJcbiAgICAvLyB0aGlzLmhhbmRsZUhpZGluZygpO1xyXG5cclxuICAgIGlmICghdGhpcy5kYXRhKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNvcnRDaGFuZ2VkID0gY2hhbmdlcy5zb3J0ZWQgIT09IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAoIXRoaXMuaGlkZGVuKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlUGxvdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNEYXRhVXBkYXRlKGNoYW5nZXM6IGFueSk6IGJvb2xlYW4ge1xyXG5cclxuICAgIHJldHVybiAoY2hhbmdlcy5kYXRhIHx8IGNoYW5nZXMucmVtb3ZlZCB8fCBjaGFuZ2VzLmRvbWFpbiB8fCBjaGFuZ2VzLnBhbGV0dGUgfHwgY2hhbmdlcy5sYWJlbHMgKTtcclxuICB9XHJcblxyXG4gIGluaXRTVkcoKSB7XHJcbiAgICBpZiAoIXRoaXMuZDNTdmcpIHtcclxuICAgICAgY29uc3QgZDNQYXJlbnRFbGVtZW50ID0gdGhpcy5kMy5zZWxlY3QodGhpcy5wYXJlbnROYXRpdmVFbGVtZW50KTtcclxuICAgICAgdGhpcy5kM1N2ZyA9IGQzUGFyZW50RWxlbWVudC5zZWxlY3QoJy5oYm94LXBsb3QnKS5hcHBlbmQ8U1ZHU1ZHRWxlbWVudD4oJ3N2ZycpO1xyXG4gICAgICB0aGlzLmQzU3ZnLmF0dHIoJ3dpZHRoJywgJzAnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG5cclxuICAgIGlmICh0aGlzLnBhcmVudE5hdGl2ZUVsZW1lbnQgIT09IG51bGwpIHtcclxuXHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyBwYXJyZW50IGVsZW1lbnQgZm9yIHRoZSBjb21wb25lbnQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMuZDNTdmcgJiYgdGhpcy5kM1N2Zy5lbXB0eSAmJiAhdGhpcy5kM1N2Zy5lbXB0eSgpKSB7XHJcbiAgICAgIHRoaXMuZDNTdmcuc2VsZWN0QWxsKCcqJykucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPbmx5IGZvciB0ZXN0aW5nXHJcbiAgICogQHBhcmFtIGNvbnRleHRcclxuICAgKi9cclxuICB0ZXN0R3JhcGhpY0NvbnRleHQoY29udGV4dDogR3JhcGhpY0NvbnRleHQpIHtcclxuICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQgPSBjb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgLyogTm90IG5lZWRlZCBhbnkgbW9yZSwgdGhlIGhpZGRpbmcgaXMgYWNoaWV2ZWQgYnkgc2ltcGxlIGRpdiBoaWRkZW4gYXR0cmlidXRlXHJcbiAgIC8vIGFuZCB0aGUgcHJvYmxlbSB3aXRoIGxhYmVscyBiYWNrZ3JvdW5kIHJlbmRlcmluZyBpcyBzb2x2ZWQgdXNpbmcgZGVsYXllZCByZW5kZXJpbmcgd2l0aCBhIHRpbWVyLlxyXG4gICBoYW5kbGVIaWRpbmcoKSB7XHJcbiAgIGlmICh0aGlzLmhpZGRlbikge1xyXG4gICB0aGlzLnJlbW92ZWQgPSB0aGlzLmQzU3ZnLnJlbW92ZSgpO1xyXG4gICB9IGVsc2Uge1xyXG4gICBpZiAodGhpcy5yZW1vdmVkKSB7XHJcbiAgIHRoaXMuZDMuc2VsZWN0KHRoaXMucGFyZW50TmF0aXZlRWxlbWVudClcclxuICAgLnNlbGVjdCgnLmhib3gtcGxvdCcpXHJcbiAgIC5hcHBlbmQoKCkgPT4gdGhpcy5kM1N2Zy5ub2RlKCkpO1xyXG4gICB0aGlzLnJlbW92ZWQgPSB1bmRlZmluZWQ7XHJcbiAgIH1cclxuICAgfVxyXG5cclxuICAgfSovXHJcblxyXG4gIHVwZGF0ZVBsb3QoKSB7XHJcblxyXG4gICAgLy8gdGhpcy5ncmFwaGljQ29udGV4dC50cmFuc2l0aW9uVGltZSA9IHRoaXMubG9va0FuZEZlZWwudHJhbnNpdGlvblRpbWU7XHJcblxyXG4gICAgaWYgKHRoaXMubG9va0FuZEZlZWwudHJhbnNpdGlvblRpbWUgPiAwKSB7XHJcbiAgICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbk9uID0gdHJ1ZTtcclxuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbiA9ICh0aGlzLmQzIGFzIGFueSkudHJhbnNpdGlvbigpLmR1cmF0aW9uKHRoaXMubG9va0FuZEZlZWwudHJhbnNpdGlvblRpbWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbk9uID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdyYXBoaWNDb250ZXh0ID0gdGhpcy51cGRhdGVQYWxldHRlKHRoaXMuZGF0YSwgdGhpcy5wYWxldHRlLCB0aGlzLmdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBsZXQgYm94ZXMgPSB0aGlzLnByZXBhcmVEYXRhTW9kZWwodGhpcy5kYXRhLCB0aGlzLnJlbW92ZWQsIHRoaXMubGFiZWxzLCB0aGlzLmdyYXBoaWNDb250ZXh0LnBhbGV0dGUsXHJcbiAgICAgIHRoaXMuZG9tYWluLCB0aGlzLnNvcnRGdW5jdGlvbik7XHJcblxyXG4gICAgYm94ZXMgPSBib3hlcy5maWx0ZXIoYiA9PiAhYi5oaWRkZW4pO1xyXG5cclxuICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQgPSB0aGlzLnByZXBhcmVQYW5lKGJveGVzLCB0aGlzLmxvb2tBbmRGZWVsLCB0aGlzLmdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICB0aGlzLmdyYXBoaWNDb250ZXh0ID0gdGhpcy5wcmVwYXJlU2NhbGVzKGJveGVzLCB0aGlzLmRvbWFpbiwgdGhpcy5sb29rQW5kRmVlbCwgdGhpcy5ncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dCA9IHRoaXMucGxvdEF4aXNCb3goYm94ZXMsIHRoaXMuZG9tYWluLCB0aGlzLmxvb2tBbmRGZWVsLCB0aGlzLm1haW5QYW5lLCB0aGlzLmdyYXBoaWNDb250ZXh0KTtcclxuXHJcblxyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dCA9IHRoaXMucGxvdERhdGFCb3hlcyhib3hlcywgdGhpcy5sb29rQW5kRmVlbCwgdGhpcy5tYWluUGFuZSwgdGhpcy5ncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dCA9IHRoaXMucHJlcGFyZVRvb2x0aXAodGhpcy5tYWluUGFuZSwgdGhpcy5ncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dCA9IHRoaXMucHJlcGFyZUxhYmVscyhib3hlcywgdGhpcy5tYWluUGFuZSwgdGhpcy5sb29rQW5kRmVlbCwgdGhpcy5ncmFwaGljQ29udGV4dCwgdGhpcy5sYWJlbHNPbik7XHJcblxyXG4gIH1cclxuXHJcbiAgcHJlcGFyZURhdGFNb2RlbChkYXRhOiBudW1iZXJbXVtdLCByZW1vdmVkOiBudW1iZXJbXSwgbGFiZWxzOiBzdHJpbmdbXSwgcGFsZXR0ZTogc3RyaW5nW10sIGRvbWFpbjogbnVtYmVyW10sXHJcbiAgICAgICAgICAgICAgICAgICBzb3J0RnVuY3Rpb246IChiMTogQm94RGVmaW5pdGlvbiwgYjI6IEJveERlZmluaXRpb24pID0+IG51bWJlcik6IEJveERlZmluaXRpb25bXSB7XHJcblxyXG4gICAgbGV0IGJveGVzID0gdGhpcy5ib3hVdGlsLmRhdGFUb0JveGVzKGRhdGEpO1xyXG5cclxuICAgIHRoaXMuYm94VXRpbC5tb2NrRW1wdHlWYWx1ZXMoYm94ZXMsIGRvbWFpblsxXSk7XHJcbiAgICB0aGlzLmxhYmVsQm94ZXMoYm94ZXMsIGxhYmVscyk7XHJcblxyXG4gICAgdGhpcy5jb2xvckJveGVzKGJveGVzLCBwYWxldHRlKTtcclxuXHJcbiAgICByZW1vdmVkLmZvckVhY2goaXggPT4ge1xyXG4gICAgICBpZiAoYm94ZXNbaXhdKSB7XHJcbiAgICAgICAgYm94ZXNbaXhdLmhpZGRlbiA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGJveGVzID0gYm94ZXMuc29ydChzb3J0RnVuY3Rpb24pO1xyXG4gICAgcmV0dXJuIGJveGVzO1xyXG5cclxuICB9XHJcblxyXG5cclxuICB1cGRhdGVQYWxldHRlKGRhdGE6IGFueVtdLCBwYWxldHRlOiBzdHJpbmdbXSwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KTogR3JhcGhpY0NvbnRleHQge1xyXG5cclxuICAgIGlmICghcGFsZXR0ZSB8fCBwYWxldHRlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBncmFwaGljQ29udGV4dC5wYWxldHRlID0gQkQyQ29sb3JQYWxldHRlLnBhbGV0dGUoZGF0YS5sZW5ndGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZ3JhcGhpY0NvbnRleHQucGFsZXR0ZSA9IEJEMkNvbG9yUGFsZXR0ZS5leHRlbmRQYWxldHRlKHBhbGV0dGUsIGRhdGEubGVuZ3RoKTtcclxuXHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbG9ycy5uZXh0KGdyYXBoaWNDb250ZXh0LnBhbGV0dGUuc2xpY2UoKSk7XHJcblxyXG4gICAgcmV0dXJuIGdyYXBoaWNDb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgY29sb3JCb3hlcyhib3hlczogQm94RGVmaW5pdGlvbltdLCBwYWxldHRlOiBzdHJpbmdbXSkge1xyXG4gICAgYm94ZXMuZm9yRWFjaChiID0+IGIuY29sb3IgPSBwYWxldHRlW2IuaXhdKTtcclxuICB9XHJcblxyXG5cclxuICBwcmVwYXJlUGFuZShkYXRhOiBhbnlbXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQpOiBHcmFwaGljQ29udGV4dCB7XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coXCJQUFwiLGRhdGEpO1xyXG5cclxuICAgIGlmICghdGhpcy5tYWluUGFuZSkge1xyXG4gICAgICAvLyBsZXQgZDNQYXJlbnRFbGVtZW50ID0gdGhpcy5kMy5zZWxlY3QodGhpcy5wYXJlbnROYXRpdmVFbGVtZW50KTtcclxuICAgICAgLy8gdGhpcy5kM1N2ZyA9IGQzUGFyZW50RWxlbWVudC5zZWxlY3QoJy5oYm94LXBsb3QnKS5hcHBlbmQ8U1ZHU1ZHRWxlbWVudD4oJ3N2ZycpO1xyXG4gICAgICB0aGlzLmQzU3ZnLmF0dHIoJ3dpZHRoJywgJzEwMCUnKTtcclxuXHJcbiAgICAgIHRoaXMubWFpblBhbmUgPSB0aGlzLmQzU3ZnLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKTtcclxuICAgICAgdGhpcy5tYWluUGFuZS5jbGFzc2VkKCdtYWluUGFuZScsIHRydWUpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwV2lkdGggPSA1MDA7XHJcbiAgICBjb25zdCBwSGVpZ2h0ID0gdGhpcy5jYWxjdWxhdGVXb3Jrc3BhY2VIZWlnaHQoZGF0YSwgbG9va0FuZEZlZWwpICsgMiAqIGxvb2tBbmRGZWVsLnZNYXJnaW47XHJcblxyXG4gICAgY29uc3QgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IHRoaXMuZDNTdmcudHJhbnNpdGlvbihncmFwaGljQ29udGV4dC50cmFuc2l0aW9uKSA6IHRoaXMuZDNTdmcpO1xyXG4gICAgZWxtLmF0dHIoJ3ZpZXdCb3gnLCAnMCAwICcgKyBwV2lkdGggKyAnICcgKyBwSGVpZ2h0KTtcclxuICAgIHRoaXMubWFpblBhbmUuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgbG9va0FuZEZlZWwuaE1hcmdpbkwgKyAnLCcgKyBsb29rQW5kRmVlbC52TWFyZ2luICsgJyknKTtcclxuICAgIC8vIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyAocFdpZHRoIC8gMikgKyAnLCcgKyAocEhlaWdodCAvIDIpICsgJyknKTsgLy9tb3ZlcyAwLDAgb2YgdGhlIHBhaW4gdG8gdGhlIG1pZGRsZSBvZiB0aGUgZ3JhcGhpY3NcclxuXHJcbiAgICBncmFwaGljQ29udGV4dC53b3Jrc3BhY2VXaWR0aCA9IHBXaWR0aCAtIGxvb2tBbmRGZWVsLmhNYXJnaW5MIC0gbG9va0FuZEZlZWwuaE1hcmdpblI7XHJcbiAgICBncmFwaGljQ29udGV4dC53b3Jrc3BhY2VIZWlnaHQgPSBwSGVpZ2h0IC0gMiAqIGxvb2tBbmRGZWVsLnZNYXJnaW47XHJcblxyXG4gICAgcmV0dXJuIGdyYXBoaWNDb250ZXh0O1xyXG5cclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZVdvcmtzcGFjZUhlaWdodChkYXRhOiBhbnlbXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsKSB7XHJcbiAgICByZXR1cm4gbG9va0FuZEZlZWwucm93V2lkdGggKiBkYXRhLmxlbmd0aDtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgbGFiZWxCb3hlcyhib3hlczogQm94RGVmaW5pdGlvbltdLCBsYWJlbHM6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAoIWxhYmVscykge1xyXG4gICAgICBsYWJlbHMgPSBbXTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYm94ZXMuZm9yRWFjaCgoYiwgaXgpID0+IHtcclxuICAgICAgYi5sYWJlbCA9IGxhYmVsc1tpeF0gPyBsYWJlbHNbaXhdIDogJycgKyAoaXggKyAxKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJlcGFyZUxhYmVscyhib3hlczogQm94RGVmaW5pdGlvbltdLCBtYWluUGFuZTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD4sIGxvb2tBbmRGZWVsOiBMb29rQW5kRmVlbCxcclxuICAgICAgICAgICAgICAgIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCwgbGFiZWxzT246IHN0cmluZyk6IEdyYXBoaWNDb250ZXh0IHtcclxuXHJcbiAgICBpZiAoIWdyYXBoaWNDb250ZXh0LmxhYmVsc1dyYXBwZXIpIHtcclxuICAgICAgZ3JhcGhpY0NvbnRleHQubGFiZWxzV3JhcHBlciA9IG1haW5QYW5lLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKVxyXG4gICAgICAgIC5jbGFzc2VkKCdsYWJlbHNXcmFwcGVyJywgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFncmFwaGljQ29udGV4dC5iYWNrTGFiZWxzV3JhcHBlcikge1xyXG4gICAgICBncmFwaGljQ29udGV4dC5iYWNrTGFiZWxzV3JhcHBlciA9IG1haW5QYW5lLmluc2VydDxTVkdHRWxlbWVudD4oJ2cnLCAnZy5kYXRhV3JhcHBlcicpXHJcbiAgICAgICAgLmNsYXNzZWQoJ2JhY2tMYWJlbHNXcmFwcGVyJywgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmFja0xhYmVsc09uID0gbGFiZWxzT24gPT09ICdhbHdheXMnO1xyXG4gICAgY29uc3QgbWFpbkxhYmVsc09uID0gbGFiZWxzT24gPT09ICdhbHdheXMnIHx8IGxhYmVsc09uID09PSAndHJpZ2dlcic7XHJcblxyXG5cclxuICAgIGNvbnN0IGxhYmVscyA9IGdyYXBoaWNDb250ZXh0LmxhYmVsc1dyYXBwZXIuc2VsZWN0QWxsKCdnLnlMYWJlbCcpXHJcbiAgICAgIC5kYXRhKG1haW5MYWJlbHNPbiA/IGJveGVzIDogW10sIChkOiBCb3hEZWZpbml0aW9uKSA9PiBkLmtleSk7XHJcblxyXG4gICAgbGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcclxuXHJcbiAgICBjb25zdCBuZXdMYWJlbHMgPSBsYWJlbHMuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kPFNWR0dFbGVtZW50PignZycpXHJcbiAgICAgIC5jbGFzc2VkKCd5TGFiZWwnLCB0cnVlKTtcclxuXHJcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIG5ld0xhYmVscy5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZXZudDogTW91c2VFdmVudCwgZDogQm94RGVmaW5pdGlvbikge1xyXG4gICAgICAgIGQzLnNlbGVjdCh0aGlzKVxyXG4gICAgICAgICAgLnNlbGVjdEFsbCgnLnlMYWJlbCcpXHJcbiAgICAgICAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcclxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xyXG4gICAgICB9KS5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBkMy5zZWxlY3QodGhpcylcclxuICAgICAgICAgIC5zZWxlY3RBbGwoJy55TGFiZWwnKVxyXG4gICAgICAgICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgbmV3TGFiZWxzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ3JlY3QnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAneVRyaWdnZXInKVxyXG4gICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIDEpXHJcbiAgICA7XHJcblxyXG4gICAgbmV3TGFiZWxzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ3JlY3QnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAneUxhYmVsJylcclxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAwLjM1KVxyXG4gICAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xyXG4gICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG5cclxuXHJcbiAgICBuZXdMYWJlbHMuYXBwZW5kPFNWR0dFbGVtZW50PigndGV4dCcpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICd5TGFiZWwnKVxyXG4gICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbGVmdCcpXHJcbiAgICAgIC5hdHRyKCdkb21pbmFudC1iYXNlbGluZScsICdjZW50cmFsJylcclxuICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBsb29rQW5kRmVlbC5sYWJlbEZvbnQpXHJcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpXHJcbiAgICAgIC5hdHRyKCd4JywgNSlcclxuICAgIC8vIC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICAvLyAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIDtcclxuXHJcbiAgICBjb25zdCBiYWNrTGFiZWxzID0gZ3JhcGhpY0NvbnRleHQuYmFja0xhYmVsc1dyYXBwZXIuc2VsZWN0QWxsKCdnLnlMYWJlbCcpXHJcbiAgICAgIC5kYXRhKGJhY2tMYWJlbHNPbiA/IGJveGVzIDogW10sIChkOiBCb3hEZWZpbml0aW9uKSA9PiBkLmtleSk7XHJcblxyXG4gICAgYmFja0xhYmVscy5leGl0KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgY29uc3QgbmV3QmFja0xhYmVscyA9IGJhY2tMYWJlbHMuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kPFNWR0dFbGVtZW50PignZycpXHJcbiAgICAgIC5jbGFzc2VkKCd5TGFiZWwnLCB0cnVlKTtcclxuXHJcbiAgICAvKlxyXG4gICAgIG5ld0JhY2tMYWJlbHMuYXBwZW5kPFNWR0dFbGVtZW50PihcInJlY3RcIilcclxuICAgICAuYXR0cihcImNsYXNzXCIsIFwieUxhYmVsXCIpXHJcbiAgICAgLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDAuMDUpO1xyXG4gICAgICovXHJcblxyXG4gICAgbmV3QmFja0xhYmVscy5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCd0ZXh0JylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3lMYWJlbCcpXHJcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdsZWZ0JylcclxuICAgICAgLmF0dHIoJ2RvbWluYW50LWJhc2VsaW5lJywgJ2NlbnRyYWwnKVxyXG4gICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIGxvb2tBbmRGZWVsLmxhYmVsRm9udClcclxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgbG9va0FuZEZlZWwuYmFja0xhYmVsT3BhY2l0eSlcclxuICAgICAgLmF0dHIoJ3gnLCA1KTtcclxuICAgIC8vIC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcblxyXG5cclxuICAgIGNvbnN0IGVudGVyVXBkYXRlOiBTZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiA9XHJcbiAgICAgIG5ld0xhYmVscy5tZXJnZShsYWJlbHMgYXMgYW55KSBhcyBTZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPjtcclxuXHJcbiAgICBjb25zdCBiYWNrRW50ZXJVcGRhdGU6IFNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCBCb3hEZWZpbml0aW9uLCBudWxsLCB1bmRlZmluZWQ+ID1cclxuICAgICAgbmV3QmFja0xhYmVscy5tZXJnZShiYWNrTGFiZWxzIGFzIGFueSkgYXMgU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIEJveERlZmluaXRpb24sIG51bGwsIHVuZGVmaW5lZD47XHJcblxyXG4gICAgLy8gY2FsbGVkIHdpdGggZGVsYXkgdG8gYWxsb3csIHBhcmVudCBkaXZzIHRvIGNvbXBvbmVudCBzZXRzIHRoZWlyIHZpc2liaWxpdHksIG90aGVyd2lzZSB0aGUgYmJveGVzIGNhbm5vdCBiZSBjYWxjdWxhdGVkXHJcbiAgICAvLyBhbmQgdGhlIGxhYmVscyBiYWNrZ3JvdW5kcyBhbmQgdHJpZ2VycyBhcmUgbm90IHJlbmRlcmVkIGNvcnJlY3RseVxyXG4gICAgLy8gaXQgaXMgYSBoYWNrLCBidXQgZG9uJ3Qga25vdyBob3cgdG8gZG8gaXQgY29ycmVjdGx5XHJcbiAgICAvLyB0aW1lcnMgaGF2ZSB0byBiZSBjbGVhcmVkIGFzIG90aGVyd2lzZSBzYXcgZXJyb3JzIGluIGxvZ3MgZm9yIGZhc3QgY2hhbmdpbmcgaW5wdXQgZGF0YSAobGlrZSBjYXVzZSBieSBzb3J0aW5nIGFuZCBwYWdpbmF0aW9uKVxyXG4gICAgZ3JhcGhpY0NvbnRleHQubGFiZWxzVGltZXJzLmZvckVhY2goIHRpbWVyID0+IGNsZWFyVGltZW91dCh0aW1lcikpO1xyXG4gICAgZ3JhcGhpY0NvbnRleHQubGFiZWxzVGltZXJzID0gW107XHJcbiAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cclxuXHJcbiAgICAgIGNvbnN0IGJib3hlczogU1ZHUmVjdFtdID0gW107XHJcblxyXG4gICAgICBlbnRlclVwZGF0ZS5zZWxlY3Q8U1ZHU1ZHRWxlbWVudD4oJ3RleHQnKVxyXG4gICAgICAgIC5zdHlsZSgnZGlzcGxheScsIG51bGwpXHJcbiAgICAgICAgLmF0dHIoJ3knLCBkID0+IGdyYXBoaWNDb250ZXh0LnlTY2FsZShkLmtleSkgKyBncmFwaGljQ29udGV4dC55U2NhbGUuYmFuZHdpZHRoKCkgLyAyKVxyXG4gICAgICAgIC50ZXh0KGQgPT4gZC5sYWJlbClcclxuICAgICAgICAuZWFjaChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICBiYm94ZXMucHVzaCh0aGlzLmdldEJCb3goKSk7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkQ6IFwiICsgZC5sYWJlbCwgdGhpcy5nZXRCQm94KCkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuXHJcblxyXG4gICAgICBsZXQgZWxtID0gYmFja0VudGVyVXBkYXRlLnNlbGVjdDxTVkdTVkdFbGVtZW50PigndGV4dCcpO1xyXG4gICAgICBlbG0gPSAoZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbk9uID8gZWxtLnRyYW5zaXRpb24oZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbikgOiBlbG0pIGFzIGFueTtcclxuICAgICAgZWxtXHJcbiAgICAgICAgLmF0dHIoJ3knLCBkID0+IGdyYXBoaWNDb250ZXh0LnlTY2FsZShkLmtleSkgKyBncmFwaGljQ29udGV4dC55U2NhbGUuYmFuZHdpZHRoKCkgLyAyKVxyXG4gICAgICAgIC50ZXh0KGQgPT4gZC5sYWJlbClcclxuICAgICAgLy8gLnN0eWxlKFwiZmlsbFwiLCBkID0+IGQuY29sb3IpXHJcbiAgICAgIC8qLmVhY2goZnVuY3Rpb24gKGQpIHtcclxuICAgICAgIGJib3hlcy5wdXNoKHRoaXMuZ2V0QkJveCgpKTtcclxuICAgICAgIC8vY29uc29sZS5sb2coXCJEOiBcIiArIGQubGFiZWwsIHRoaXMuZ2V0QkJveCgpKTtcclxuICAgICAgIH0pOyovXHJcbiAgICAgIDtcclxuXHJcbiAgICAgIGNvbnN0IHRyaWdlcnMgPSBlbnRlclVwZGF0ZS5zZWxlY3Q8U1ZHU1ZHRWxlbWVudD4oJy55VHJpZ2dlcicpXHJcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZCA9PiBkLmNvbG9yKTtcclxuXHJcblxyXG4gICAgICBsZXQgdGVsbSA9IHRyaWdlcnMuZGF0YShiYm94ZXMpO1xyXG4gICAgICB0ZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IHRlbG0udHJhbnNpdGlvbihncmFwaGljQ29udGV4dC50cmFuc2l0aW9uKSA6IHRlbG0pIGFzIGFueTtcclxuICAgICAgdGVsbVxyXG4gICAgICAgIC5hdHRyKCd4JywgLTcpXHJcbiAgICAgICAgLmF0dHIoJ3knLCBiID0+IGIueSAtIDMpXHJcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgYiA9PiA3KVxyXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBiID0+IGIuaGVpZ2h0ICsgNik7XHJcblxyXG4gICAgICBjb25zdCBmcmFtZXMgPSBlbnRlclVwZGF0ZS5zZWxlY3Q8U1ZHU1ZHRWxlbWVudD4oJ3JlY3QueUxhYmVsJylcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGQuY29sb3IpXHJcbiAgICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBsb29rQW5kRmVlbC5sYWJlbEZpbGxPcGFjaXR5KTtcclxuXHJcbiAgICAgIGZyYW1lcy5kYXRhKGJib3hlcylcclxuICAgICAgICAuYXR0cigneCcsIDApXHJcbiAgICAgICAgLmF0dHIoJ3knLCBiID0+IGIueSAtIDMpXHJcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgYiA9PiBiLndpZHRoICsgMTApXHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGIgPT4gYi5oZWlnaHQgKyA3KTtcclxuXHJcblxyXG4gICAgICAvKlxyXG4gICAgICAgbGV0IGJhY2tGcmFtZXMgPSBiYWNrRW50ZXJVcGRhdGUuc2VsZWN0PFNWR1NWR0VsZW1lbnQ+KFwicmVjdC55TGFiZWxcIilcclxuICAgICAgIC5zdHlsZShcImZpbGxcIiwgZCA9PiBkLmNvbG9yKTtcclxuXHJcbiAgICAgICBiYWNrRnJhbWVzLmRhdGEoYmJveGVzKVxyXG4gICAgICAgLmF0dHIoXCJ4XCIsIDApXHJcbiAgICAgICAuYXR0cihcInlcIiwgYiA9PiBiLnkgLSAzKVxyXG4gICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBiID0+IGIud2lkdGggKyAxMClcclxuICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGIgPT4gYi5oZWlnaHQgKyA3KTtcclxuICAgICAgICovXHJcblxyXG4gICAgfSwgMTApO1xyXG5cclxuICAgIGdyYXBoaWNDb250ZXh0LmxhYmVsc1RpbWVycy5wdXNoKHRpbWVyKTtcclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuICB9XHJcblxyXG5cclxuICBwcmVwYXJlVG9vbHRpcChtYWluUGFuZTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD4sIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCk6IEdyYXBoaWNDb250ZXh0IHtcclxuXHJcbiAgICBpZiAoZ3JhcGhpY0NvbnRleHQudG9vbHRpcFdyYXBwZXIpIHtcclxuICAgICAgcmV0dXJuIGdyYXBoaWNDb250ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGdyYXBoaWNDb250ZXh0LnRvb2x0aXBXcmFwcGVyID0gbWFpblBhbmUuYXBwZW5kPFNWR0dFbGVtZW50PignZycpXHJcbiAgICAgIC5jbGFzc2VkKCd0b29sdGlwV3JhcHBlcicsIHRydWUpO1xyXG5cclxuICAgIGdyYXBoaWNDb250ZXh0LnRvb2x0aXBCb3ggPSBncmFwaGljQ29udGV4dC50b29sdGlwV3JhcHBlci5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdyZWN0JylcclxuICAgICAgLnN0eWxlKCdmaWxsJywgJ3doaXRlJylcclxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAwLjgpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ2dyZXknKVxyXG4gICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgIDtcclxuXHJcbiAgICBncmFwaGljQ29udGV4dC50b29sdGlwVGV4dCA9IGdyYXBoaWNDb250ZXh0LnRvb2x0aXBXcmFwcGVyLmFwcGVuZDxTVkdHRWxlbWVudD4oJ3RleHQnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAndG9vbHRpcCcpXHJcbiAgICAgIC8vIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJsZWZ0XCIpXHJcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxyXG4gICAgICAvLyAuYXR0cihcImFsaWdubWVudC1iYXNlbGluZVwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAvLyAuYXR0cihcImFsaWdubWVudC1iYXNlbGluZVwiLCBcImJhc2VsaW5lXCIpXHJcbiAgICAgIC8vIC5hdHRyKFwiZHlcIiwgXCItMTBweFwiKVxyXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKVxyXG4gICAgLy8gLmF0dHIoXCJkeFwiLCBcIjAuMzVlbVwiKVxyXG4gICAgLy8gLnN0eWxlKFwiZm9udC1zaXplXCIsIHRoaXMubG9va0FuZEZlZWwudG9vbHRpcEZvbnRTaXplKSAvL1wiMTFweFwiKVxyXG4gICAgLy8gLnN0eWxlKFwib3BhY2l0eVwiLCAwKVxyXG4gICAgO1xyXG5cclxuICAgIGdyYXBoaWNDb250ZXh0LnRvb2x0aXBXcmFwcGVyXHJcbiAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xyXG4gICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG5cclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuICB9XHJcblxyXG4gIHNob3dUb29sdGlwKHY6IG51bWJlciwgeDogYW55LCB5OiBhbnkpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiU2hvdzogXCIgKyB2ICsgXCI7XCIgKyB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1Nob3c6ICcgKyB2ICsgJzsgJyArIHggKyAnOiAnICsgeSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygndicsIFNtYXJ0Um91bmRlci5yb3VuZCh2KSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygneCcsIHRoaXMuZ3JhcGhpY0NvbnRleHQueFNjYWxlKHgpKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCd5JywgdGhpcy5ncmFwaGljQ29udGV4dC55U2NhbGUoeSkpO1xyXG5cclxuICAgIGlmICghdGhpcy5ncmFwaGljQ29udGV4dC50b29sdGlwVGV4dCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dC50b29sdGlwVGV4dFxyXG4gICAgICAuYXR0cigneCcsIHRoaXMuZ3JhcGhpY0NvbnRleHQueFNjYWxlKHgpKVxyXG4gICAgICAuYXR0cigneScsIHRoaXMuZ3JhcGhpY0NvbnRleHQueVNjYWxlKHkpKVxyXG4gICAgICAudGV4dChTbWFydFJvdW5kZXIucm91bmQodikpXHJcbiAgICAvLyAudHJhbnNpdGlvbigpLmR1cmF0aW9uKHRoaXMubG9va0FuZEZlZWwuYmFzZVRyYW5zaXRpb25zVGltZSAvIDIpXHJcbiAgICAvLyAuc3R5bGUoJ29wYWNpdHknLCAxKTtcclxuICAgIDtcclxuXHJcbiAgICAvLyBJIGhhdmUgdG8gY2hhbmdlIHRoZSBkaXNwbGF5IGhlcmUgZXZlbiBiZWZvcmUgdGhlIGJveCBpcyByZWFkeSBhc1xyXG4gICAgLy8gaW4gZmlyZWZveCB0aGUgZ2V0QkJveCB3YXMgbm90IHdvcmtpbmcgaWYgY2FsbGVkIHdpdGggZGlzcGxheSBub25lXHJcbiAgICAvLyBnaXZpbmcgTlNfRVJST1JfRkFJTFVSRSAyMTQ3NTAwMDM3XHJcbiAgICB0aGlzLmdyYXBoaWNDb250ZXh0LnRvb2x0aXBXcmFwcGVyXHJcbiAgICAgIC8vIC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xyXG4gICAgICAuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcclxuXHJcbiAgICBjb25zdCBiYm94ID0gdGhpcy5ncmFwaGljQ29udGV4dC50b29sdGlwVGV4dC5ub2RlKCkuZ2V0QkJveCgpO1xyXG5cclxuICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQudG9vbHRpcEJveFxyXG4gICAgICAuYXR0cigneCcsIGJib3gueCAtIDMpXHJcbiAgICAgIC5hdHRyKCd5JywgYmJveC55IC0gMilcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgYmJveC53aWR0aCArIDYpXHJcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCBiYm94LmhlaWdodCArIDQpO1xyXG5cclxuXHJcblxyXG5cclxuICB9XHJcblxyXG4gIGhpZGVUb29sdGlwKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJIaWRlOiBcIik7XHJcbiAgICBpZiAoIXRoaXMuZ3JhcGhpY0NvbnRleHQudG9vbHRpcFRleHQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB0aGlzLmdyYXBoaWNDb250ZXh0LnRvb2x0aXBXcmFwcGVyXHJcbiAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xyXG4gICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG5cclxuXHJcbiAgICAvLyB0aGlzLmdyYXBoaWNDb250ZXh0LnRvb2x0aXBUZXh0XHJcbiAgICAvLyAudHJhbnNpdGlvbigpLmR1cmF0aW9uKHRoaXMubG9va0FuZEZlZWwuYmFzZVRyYW5zaXRpb25zVGltZSAvIDIpXHJcbiAgICAvLyAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xyXG4gIH1cclxuXHJcbiAgcHJlcGFyZVNjYWxlcyhkYXRhOiBCb3hEZWZpbml0aW9uW10sIGRvbWFpbjogbnVtYmVyW10sIGxvb2tBbmRGZWVsOiBMb29rQW5kRmVlbCxcclxuICAgICAgICAgICAgICAgIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCk6IEdyYXBoaWNDb250ZXh0IHtcclxuXHJcbiAgICBpZiAoIWdyYXBoaWNDb250ZXh0LnhTY2FsZSkge1xyXG4gICAgICBncmFwaGljQ29udGV4dC54U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgLmNsYW1wKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdyYXBoaWNDb250ZXh0LnhTY2FsZVxyXG4gICAgICAuZG9tYWluKGRvbWFpbilcclxuICAgICAgLnJhbmdlKFswLCBncmFwaGljQ29udGV4dC53b3Jrc3BhY2VXaWR0aF0pO1xyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQueVNjYWxlKSB7XHJcbiAgICAgIGdyYXBoaWNDb250ZXh0LnlTY2FsZSA9IGQzLnNjYWxlQmFuZCgpXHJcbiAgICAgICAgLnBhZGRpbmcobG9va0FuZEZlZWwucm93R2FwKVxyXG4gICAgICA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZG9tYWluWSA9IGRhdGEubWFwKChkKSA9PiBkLmtleSk7XHJcblxyXG4gICAgZ3JhcGhpY0NvbnRleHQueVNjYWxlXHJcbiAgICAgIC5kb21haW4oZG9tYWluWSlcclxuICAgICAgLnJhbmdlKFswLCBncmFwaGljQ29udGV4dC53b3Jrc3BhY2VIZWlnaHRdKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIGdyYXBoaWNDb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgcGxvdEF4aXNCb3goZGF0YTogQm94RGVmaW5pdGlvbltdLCBkb21haW46IG51bWJlcltdLCBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIG1haW5QYW5lOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQpOiBHcmFwaGljQ29udGV4dCB7XHJcblxyXG4gICAgaWYgKCFncmFwaGljQ29udGV4dC5heGlzV3JhcHBlcikge1xyXG4gICAgICBncmFwaGljQ29udGV4dC5heGlzV3JhcHBlciA9IHRoaXMuaW5pdEF4aXNXcmFwcGVyKG1haW5QYW5lKTtcclxuICAgIH1cclxuXHJcbiAgICBncmFwaGljQ29udGV4dCA9IHRoaXMucGxvdEhvcml6b250YWxTY2FsZXMoZG9tYWluLCBsb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQpO1xyXG4gICAgZ3JhcGhpY0NvbnRleHQgPSB0aGlzLnBsb3RWZXJ0aWNhbFNjYWxlcyhkYXRhLCBsb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuXHJcbiAgfVxyXG5cclxuICBpbml0QXhpc1dyYXBwZXIobWFpblBhbmU6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+KTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD4ge1xyXG5cclxuICAgIGxldCB3cmFwcGVyID0gbWFpblBhbmUuc2VsZWN0PFNWR0dFbGVtZW50PignLmF4aXNXcmFwcGVyJyk7XHJcbiAgICBpZiAod3JhcHBlci5zaXplKCkgPT09IDApIHtcclxuICAgICAgd3JhcHBlciA9IG1haW5QYW5lLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKS5hdHRyKCdjbGFzcycsICdheGlzV3JhcHBlcicpO1xyXG5cclxuICAgICAgd3JhcHBlci5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICd4VG9wQXhpcycpO1xyXG4gICAgICB3cmFwcGVyLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ3hCb3R0b21BeGlzJyk7XHJcbiAgICAgIHdyYXBwZXIuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAneUxlZnRBeGlzJyk7XHJcbiAgICAgIHdyYXBwZXIuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAneVJpZ2h0QXhpcycpO1xyXG5cclxuICAgIH1cclxuICAgIHJldHVybiB3cmFwcGVyO1xyXG4gIH1cclxuXHJcbiAgcGxvdEhvcml6b250YWxTY2FsZXMoZG9tYWluOiBudW1iZXJbXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQpOiBHcmFwaGljQ29udGV4dCB7XHJcblxyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQueFRvcEF4aXMpIHtcclxuICAgICAgZ3JhcGhpY0NvbnRleHQueFRvcEF4aXMgPSBkMy5heGlzVG9wKGdyYXBoaWNDb250ZXh0LnhTY2FsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFncmFwaGljQ29udGV4dC54Qm90dG9tQXhpcykge1xyXG4gICAgICBncmFwaGljQ29udGV4dC54Qm90dG9tQXhpcyA9IGQzLmF4aXNCb3R0b20oZ3JhcGhpY0NvbnRleHQueFNjYWxlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ3JhcGhpY0NvbnRleHQuYXhpc1dyYXBwZXJcclxuICAgICAgLnNlbGVjdCgnZy54VG9wQXhpcycpXHJcbiAgICAgIC5jYWxsKGdyYXBoaWNDb250ZXh0LnhUb3BBeGlzKTtcclxuXHJcbiAgICBsZXQgZWxtID0gZ3JhcGhpY0NvbnRleHQuYXhpc1dyYXBwZXIuc2VsZWN0KCdnLnhCb3R0b21BeGlzJykgYXMgYW55O1xyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKTtcclxuICAgIGVsbVxyXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBncmFwaGljQ29udGV4dC53b3Jrc3BhY2VIZWlnaHQgKyAnKScpXHJcbiAgICAgIC5jYWxsKGdyYXBoaWNDb250ZXh0LnhCb3R0b21BeGlzKTtcclxuXHJcbiAgICByZXR1cm4gZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gIH1cclxuXHJcbiAgcGxvdFZlcnRpY2FsU2NhbGVzKGRhdGE6IEJveERlZmluaXRpb25bXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQpOiBHcmFwaGljQ29udGV4dCB7XHJcblxyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQueUxlZnRBeGlzKSB7XHJcbiAgICAgIGdyYXBoaWNDb250ZXh0LnlMZWZ0QXhpcyA9IGQzLmF4aXNMZWZ0KGdyYXBoaWNDb250ZXh0LnlTY2FsZSlcclxuICAgICAgICAudGlja0Zvcm1hdCgoKSA9PiAnJylcclxuICAgICAgO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQueVJpZ2h0QXhpcykge1xyXG4gICAgICBncmFwaGljQ29udGV4dC55UmlnaHRBeGlzID0gZDMuYXhpc1JpZ2h0KGdyYXBoaWNDb250ZXh0LnlTY2FsZSlcclxuICAgICAgICAudGlja1ZhbHVlcyhbXSlcclxuICAgICAgO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBlbG0gPSBncmFwaGljQ29udGV4dC5heGlzV3JhcHBlci5zZWxlY3QoJ2cueUxlZnRBeGlzJykgYXMgYW55O1xyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKTtcclxuICAgIGVsbVxyXG4gICAgICAuY2FsbChncmFwaGljQ29udGV4dC55TGVmdEF4aXMpO1xyXG5cclxuXHJcbiAgICBlbG0gPSBncmFwaGljQ29udGV4dC5heGlzV3JhcHBlci5zZWxlY3QoJ2cueVJpZ2h0QXhpcycpXHJcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBncmFwaGljQ29udGV4dC53b3Jrc3BhY2VXaWR0aCArICcsMCknKSBhcyBhbnk7XHJcbiAgICBlbG0gPSAoZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbk9uID8gZWxtLnRyYW5zaXRpb24oZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbikgOiBlbG0pO1xyXG4gICAgZWxtXHJcbiAgICAgIC5jYWxsKGdyYXBoaWNDb250ZXh0LnlSaWdodEF4aXMpO1xyXG5cclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgcGxvdERhdGFCb3hlcyhib3hlczogQm94RGVmaW5pdGlvbltdLCBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIG1haW5QYW5lOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICAgIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCk6IEdyYXBoaWNDb250ZXh0IHtcclxuXHJcbiAgICBpZiAoIWdyYXBoaWNDb250ZXh0LmRhdGFXcmFwcGVyKSB7XHJcbiAgICAgIGdyYXBoaWNDb250ZXh0LmRhdGFXcmFwcGVyID0gbWFpblBhbmUuYXBwZW5kPFNWR0dFbGVtZW50PignZycpLmF0dHIoJ2NsYXNzJywgJ2RhdGFXcmFwcGVyJyk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBsZXQgYm94V2lkZ2V0cyA9IGdyYXBoaWNDb250ZXh0LmRhdGFXcmFwcGVyLnNlbGVjdEFsbCgnLmJveFdpZGdldCcpIGFzIFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPjtcclxuXHJcbiAgICBib3hXaWRnZXRzID0gYm94V2lkZ2V0cy5kYXRhKGJveGVzLCBkID0+IGQua2V5KTtcclxuXHJcblxyXG4gICAgdGhpcy51cGRhdGVCb3hXaWRnZXRzKGJveFdpZGdldHMsIGxvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgbmV3Qm94V2lkZ2V0cyA9IGJveFdpZGdldHMuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kPFNWR0dFbGVtZW50PignZycpLmF0dHIoJ2NsYXNzJywgJ2JveFdpZGdldCcpO1xyXG5cclxuXHJcbiAgICB0aGlzLmNyZWF0ZUJveFdpZGdldHMobmV3Qm94V2lkZ2V0cywgbG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBib3hXaWRnZXRzLmV4aXQoKS5yZW1vdmUoKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIGdyYXBoaWNDb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlQm94V2lkZ2V0cyhib3hXaWRnZXRzOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIEJveERlZmluaXRpb24sIG51bGwsIHVuZGVmaW5lZD4sXHJcbiAgICAgICAgICAgICAgICAgICBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuICAgIC8vIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuXHJcbiAgICBib3hXaWRnZXRzLnNlbGVjdCgncmVjdC5iYWNrZHJvcCcpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25CYWNrZHJvcCwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIHRoaXMudXBkYXRlV2hpc2tlcnMoYm94V2lkZ2V0cy5zZWxlY3QoJ2cud2hpc2tlcnMnKSBhcyBhbnksIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBib3hXaWRnZXRzLnNlbGVjdCgnZy5ib3ggcmVjdCcpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25Cb3hSZWN0YW5nbGUsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBib3hXaWRnZXRzLnNlbGVjdCgnZy5ib3ggbGluZS5tZWRpYW5saW5lJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbk1lZGlhbkxpbmUsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBib3hXaWRnZXRzLnNlbGVjdCgnZy5ib3ggbGluZS5tZWFubGluZScpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25NZWFuTGluZSwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIGNvbnN0IG91dCA9IGJveFdpZGdldHMuc2VsZWN0KCdnLm91dGxpZXJzJykuc2VsZWN0QWxsKCcub3V0bGllcicpXHJcbiAgICAgIC5kYXRhKGQgPT4gZC5vdXRsaWVycy5tYXAoeCA9PiBbeCwgZC5rZXksIGQuY29sb3JdKSk7XHJcblxyXG4gICAgb3V0LmVudGVyKClcclxuICAgICAgLmNhbGwodGhpcy5jcmVhdGVPdXRsaWVyLCBsb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQsIHRoaXMucG9zaXRpb25PdXRsaWVyKTtcclxuXHJcbiAgICBvdXQuY2FsbCh0aGlzLnBvc2l0aW9uT3V0bGllciwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIG91dC5leGl0KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgLy8gfSk7XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIHBvc2l0aW9uQmFja2Ryb3AoZWxtOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIEJveERlZmluaXRpb24sIG51bGwsIHVuZGVmaW5lZD4sIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuICAgIGVsbSA9IChncmFwaGljQ29udGV4dC50cmFuc2l0aW9uT24gPyBlbG0udHJhbnNpdGlvbihncmFwaGljQ29udGV4dC50cmFuc2l0aW9uKSA6IGVsbSkgYXMgYW55O1xyXG4gICAgZWxtXHJcbiAgICAgIC5hdHRyKCd4JywgKGQpID0+IG9mZnNldFNjYWxlVmFsdWUoZC5sb3dXc2tyLCAtNSwgZ3JhcGhpY0NvbnRleHQueFNjYWxlKSlcclxuICAgICAgLmF0dHIoJ3knLCAoZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpO1xyXG4gICAgICB9KVxyXG4gICAgICAuYXR0cignd2lkdGgnLCAoZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHgxID0gb2Zmc2V0U2NhbGVWYWx1ZShkLmxvd1dza3IsIC01LCBncmFwaGljQ29udGV4dC54U2NhbGUpO1xyXG4gICAgICAgIGNvbnN0IHgyID0gb2Zmc2V0U2NhbGVWYWx1ZShkLmhpZ2hXc2tyLCArNSwgZ3JhcGhpY0NvbnRleHQueFNjYWxlKTtcclxuICAgICAgICByZXR1cm4geDIgLSB4MTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoJ2hlaWdodCcsIChkKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGdyYXBoaWNDb250ZXh0LnlTY2FsZS5iYW5kd2lkdGgoKTtcclxuICAgICAgfSlcclxuICAgIC8vIC5zdHlsZShcInN0cm9rZVwiLCBkID0+IGQuY29sb3IpXHJcbiAgICAvLyAuc3R5bGUoXCJmaWxsXCIsIGQgPT4gZC5jb2xvcilcclxuICAgIDtcclxuXHJcbiAgfVxyXG5cclxuICBwb3NpdGlvbkJveFJlY3RhbmdsZShlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gnLCAoZCkgPT4gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQuZnN0UW50KSlcclxuICAgICAgLmF0dHIoJ3knLCAoZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpO1xyXG4gICAgICB9KVxyXG4gICAgICAuYXR0cignd2lkdGgnLCAoZCkgPT4gKGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLnRocmRRbnQpIC0gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQuZnN0UW50KSkpXHJcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCAoZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBncmFwaGljQ29udGV4dC55U2NhbGUuYmFuZHdpZHRoKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGQuY29sb3IpO1xyXG5cclxuICB9XHJcblxyXG4gIHBvc2l0aW9uTWVkaWFuTGluZShlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gxJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLm1lZGlhbikpXHJcbiAgICAgIC5hdHRyKCd5MScsIChkLCBpKSA9PiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpKVxyXG4gICAgICAuYXR0cigneDInLCAoZCwgaSkgPT4gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQubWVkaWFuKSlcclxuICAgICAgLmF0dHIoJ3kyJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnlTY2FsZShkLmtleSkgKyBncmFwaGljQ29udGV4dC55U2NhbGUuYmFuZHdpZHRoKCkpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIGQgPT4gZC5tZWFuID09PSBkLm1lZGlhbiA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIik7XHJcbiAgICAgIC5zdHlsZSgnZGlzcGxheScsIGQgPT4gZC5tZWFuID09PSBkLm1lZGlhbiA/ICdub25lJyA6IG51bGwpO1xyXG5cclxuXHJcblxyXG4gIH1cclxuXHJcbiAgcG9zaXRpb25NZWFuTGluZShlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gxJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLm1lYW4pKVxyXG4gICAgICAuYXR0cigneTEnLCAoZCwgaSkgPT4gZ3JhcGhpY0NvbnRleHQueVNjYWxlKGQua2V5KSlcclxuICAgICAgLmF0dHIoJ3gyJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLm1lYW4pKVxyXG4gICAgICAuYXR0cigneTInLCAoZCwgaSkgPT4gZ3JhcGhpY0NvbnRleHQueVNjYWxlKGQua2V5KSArIGdyYXBoaWNDb250ZXh0LnlTY2FsZS5iYW5kd2lkdGgoKSlcclxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBkID0+IGQuY29sb3IpO1xyXG4gIH1cclxuXHJcbiAgcG9zaXRpb25PdXRsaWVyKGVsbTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD4sIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuICAgIGVsbSA9IChncmFwaGljQ29udGV4dC50cmFuc2l0aW9uT24gPyBlbG0udHJhbnNpdGlvbihncmFwaGljQ29udGV4dC50cmFuc2l0aW9uKSA6IGVsbSkgYXMgYW55O1xyXG4gICAgZWxtLmF0dHIoJ2N4JywgZCA9PiBncmFwaGljQ29udGV4dC54U2NhbGUoZFswXSkpXHJcbiAgICAgIC5hdHRyKCdjeScsIGQgPT4gZ3JhcGhpY0NvbnRleHQueVNjYWxlKGRbMV0pICsgZ3JhcGhpY0NvbnRleHQueVNjYWxlLmJhbmR3aWR0aCgpIC8gMilcclxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBkID0+IGRbMl0pXHJcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gZFsyXSk7XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIGNyZWF0ZU91dGxpZXIoZWxtOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPiwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbk91dGxpZXJGdW5jdGlvbjogKGVsbTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD4sIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkgPT4ge30pIHtcclxuXHJcblxyXG4gICAgZWxtXHJcbiAgICAgIC5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdjaXJjbGUnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnb3V0bGllcicpXHJcbiAgICAgIC5hdHRyKCdyJywgbG9va0FuZEZlZWwub3V0bGllcnNDaXJjbGVSYWRpdXMpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgbG9va0FuZEZlZWwub3V0bGllcnNTdHJva2VXaWR0aClcclxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBsb29rQW5kRmVlbC5vdXRsaWVyc0ZpbGxPcGFjaXR5KVxyXG4gICAgICAuY2FsbChwb3NpdGlvbk91dGxpZXJGdW5jdGlvbiwgZ3JhcGhpY0NvbnRleHQpXHJcbiAgICA7XHJcblxyXG4gIH1cclxuXHJcbiAgcG9zaXRpb25XaGlza2VyTGluZShlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgbGVmdDogYm9vbGVhbiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gxJywgKGQsIGkpID0+IGxlZnQgPyBncmFwaGljQ29udGV4dC54U2NhbGUoZC5sb3dXc2tyKSA6IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLnRocmRRbnQpKVxyXG4gICAgICAuYXR0cigneTEnLCAoZCwgaSkgPT4gZ3JhcGhpY0NvbnRleHQueVNjYWxlKGQua2V5KSArIGdyYXBoaWNDb250ZXh0LnlTY2FsZS5iYW5kd2lkdGgoKSAvIDIpXHJcbiAgICAgIC5hdHRyKCd4MicsIChkLCBpKSA9PiBsZWZ0ID8gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQuZnN0UW50KSA6IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLmhpZ2hXc2tyKSlcclxuICAgICAgLmF0dHIoJ3kyJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnlTY2FsZShkLmtleSkgKyBncmFwaGljQ29udGV4dC55U2NhbGUuYmFuZHdpZHRoKCkgLyAyKVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gZC5jb2xvcilcclxuICAgICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBkID0+IChsZWZ0ICYmIChkLmxvd1dza3IgPT09IGQuZnN0UW50KSkgfHwgKCFsZWZ0ICYmIChkLmhpZ2hXc2tyID09PSBkLnRocmRRbnQpKSA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIik7XHJcbiAgICAgIC5zdHlsZSgnZGlzcGxheScsIGQgPT4gKGxlZnQgJiYgKGQubG93V3NrciA9PT0gZC5mc3RRbnQpKSB8fCAoIWxlZnQgJiYgKGQuaGlnaFdza3IgPT09IGQudGhyZFFudCkpID8gJ25vbmUnIDogbnVsbCk7XHJcblxyXG5cclxuICB9XHJcblxyXG4gIHBvc2l0aW9uV2hpc2tlclRpcChlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgbGVmdDogYm9vbGVhbiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gxJywgKGQsIGkpID0+IGxlZnQgPyBncmFwaGljQ29udGV4dC54U2NhbGUoZC5sb3dXc2tyKSA6IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLmhpZ2hXc2tyKSlcclxuICAgICAgLmF0dHIoJ3kxJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnlTY2FsZShkLmtleSkpXHJcbiAgICAgIC5hdHRyKCd4MicsIChkLCBpKSA9PiBsZWZ0ID8gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQubG93V3NrcikgOiBncmFwaGljQ29udGV4dC54U2NhbGUoZC5oaWdoV3NrcikpXHJcbiAgICAgIC5hdHRyKCd5MicsIChkLCBpKSA9PiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpICsgZ3JhcGhpY0NvbnRleHQueVNjYWxlLmJhbmR3aWR0aCgpKVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gZC5jb2xvcilcclxuICAgICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBkID0+IChsZWZ0ICYmIChkLmxvd1dza3IgPT09IGQuZnN0UW50KSkgfHwgKCFsZWZ0ICYmIChkLmhpZ2hXc2tyID09PSBkLnRocmRRbnQpKSA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIik7XHJcbiAgICAgIC5zdHlsZSgnZGlzcGxheScsIGQgPT4gKGxlZnQgJiYgKGQubG93V3NrciA9PT0gZC5mc3RRbnQpKSB8fCAoIWxlZnQgJiYgKGQuaGlnaFdza3IgPT09IGQudGhyZFFudCkpID8gJ25vbmUnIDogbnVsbCk7XHJcblxyXG5cclxuXHJcbiAgfVxyXG5cclxuICB1cGRhdGVXaGlza2Vycyh3aGlza2VyczogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBCb3hEZWZpbml0aW9uLCBudWxsLCB1bmRlZmluZWQ+LFxyXG4gICAgICAgICAgICAgICAgIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuICAgIHdoaXNrZXJzLnNlbGVjdCgnbGluZS53aGlza2VybGluZUwnKVxyXG4gICAgICAuY2FsbCh0aGlzLnBvc2l0aW9uV2hpc2tlckxpbmUsIHRydWUsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICB3aGlza2Vycy5zZWxlY3QoJ2xpbmUud2hpc2tlcmxpbmVSJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbldoaXNrZXJMaW5lLCBmYWxzZSwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIHdoaXNrZXJzLnNlbGVjdCgnbGluZS53aGlza2VydGlwTCcpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25XaGlza2VyVGlwLCB0cnVlLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgd2hpc2tlcnMuc2VsZWN0KCdsaW5lLndoaXNrZXJ0aXBSJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbldoaXNrZXJUaXAsIGZhbHNlLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG4gIH1cclxuXHJcbiAgY3JlYXRlV2hpc2tlcnMod2hpc2tlcnM6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICAgICBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuXHJcbiAgICBjb25zdCBsd2hpc2tyID0gd2hpc2tlcnMuYXBwZW5kKCdsaW5lJylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3doaXNrZXJsaW5lTCcpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgbG9va0FuZEZlZWwud2hpc2tlclN0cm9rZVdpZHRoKVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZS1kYXNoYXJyYXknLCAnNCAzJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbldoaXNrZXJMaW5lLCB0cnVlLCBncmFwaGljQ29udGV4dClcclxuICAgIDtcclxuICAgIGNvbnN0IHJ3aGlza3IgPSB3aGlza2Vycy5hcHBlbmQoJ2xpbmUnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnd2hpc2tlcmxpbmVSJylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC53aGlza2VyU3Ryb2tlV2lkdGgpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLWRhc2hhcnJheScsICc0IDMnKVxyXG4gICAgICAuY2FsbCh0aGlzLnBvc2l0aW9uV2hpc2tlckxpbmUsIGZhbHNlLCBncmFwaGljQ29udGV4dClcclxuICAgIDtcclxuXHJcbiAgICBjb25zdCBsVGlwID0gd2hpc2tlcnMuYXBwZW5kKCdsaW5lJylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3doaXNrZXJ0aXBMJylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC53aGlza2VyU3Ryb2tlV2lkdGgpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25XaGlza2VyVGlwLCB0cnVlLCBncmFwaGljQ29udGV4dClcclxuICAgIDtcclxuXHJcbiAgICBjb25zdCByVGlwID0gd2hpc2tlcnMuYXBwZW5kKCdsaW5lJylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3doaXNrZXJ0aXBSJylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC53aGlza2VyU3Ryb2tlV2lkdGgpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25XaGlza2VyVGlwLCBmYWxzZSwgZ3JhcGhpY0NvbnRleHQpXHJcbiAgICA7XHJcblxyXG5cclxuICB9XHJcblxyXG4gIGNyZWF0ZUJveGVzKHdpZGdldHM6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuXHJcbiAgICBjb25zdCByZWN0ID0gd2lkZ2V0cy5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnYm94JylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC5ib3hTdHJva2VXaWR0aClcclxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBsb29rQW5kRmVlbC5ib3hGaWxsT3BhY2l0eSlcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbkJveFJlY3RhbmdsZSwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuXHJcbiAgICBjb25zdCBtZWRpYW4gPSB3aWRnZXRzLmFwcGVuZCgnbGluZScpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdtZWRpYW5saW5lJylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC5ib3hTdHJva2VXaWR0aClcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbk1lZGlhbkxpbmUsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICByZWN0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihldm50OiBNb3VzZUV2ZW50LCBkOiBCb3hEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgaW5zdGFuY2Uuc2hvd1Rvb2x0aXAoZC5tZWRpYW4sIGQubWVkaWFuLCBkLmtleSk7XHJcbiAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaW5zdGFuY2UuaGlkZVRvb2x0aXAoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIG1lZGlhbi5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZXZudDogTW91c2VFdmVudCwgZDogQm94RGVmaW5pdGlvbikge1xyXG4gICAgICAgIGluc3RhbmNlLnNob3dUb29sdGlwKGQubWVkaWFuLCBkLm1lZGlhbiwgZC5rZXkpO1xyXG4gICAgICB9KVxyXG4gICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGluc3RhbmNlLmhpZGVUb29sdGlwKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbWVhbiA9IHdpZGdldHNcclxuICAgICAgLmFwcGVuZCgnbGluZScpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdtZWFubGluZScpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgbG9va0FuZEZlZWwubWVhblN0cm9rZVdpZHRoKVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZS1kYXNoYXJyYXknLCAnNCAyJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbk1lYW5MaW5lLCBncmFwaGljQ29udGV4dClcclxuICAgIDtcclxuXHJcbiAgICAvLyBoYXMgdG8gYmUgb3V0c2lkZSBhbmd1bGFyLCB0byBwcmV2ZW50IGRldGVjdGlvblxyXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICBtZWFuXHJcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihldm50OiBNb3VzZUV2ZW50LCBkOiBCb3hEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS5zaG93VG9vbHRpcChkLm1lYW4sIGQubWVhbiwgZC5rZXkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaW5zdGFuY2UuaGlkZVRvb2x0aXAoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBjcmVhdGVCb3hXaWRnZXRzKG5ld0JveFdpZGdldHM6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICAgICAgIGxvb2tBbmRGZWVsOiBMb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgLy8gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcztcclxuXHJcbiAgICBjb25zdCBiYWNrZHJvcHMgPSBuZXdCb3hXaWRnZXRzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ3JlY3QnKS5hdHRyKCdjbGFzcycsICdiYWNrZHJvcCcpXHJcbiAgICAvLyAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgbG9va0FuZEZlZWwuYm94U3Ryb2tlV2lkdGgpXHJcbiAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgbG9va0FuZEZlZWwuYmFja2Ryb3BPcGFjaXR5KVxyXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBsb29rQW5kRmVlbC5iYWNrZHJvcENvbG9yKVxyXG4gICAgICAuY2FsbCh0aGlzLnBvc2l0aW9uQmFja2Ryb3AsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcblxyXG4gICAgY29uc3Qgd2hpc2tlcnMgPSBuZXdCb3hXaWRnZXRzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKS5hdHRyKCdjbGFzcycsICd3aGlza2VycycpO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlV2hpc2tlcnMod2hpc2tlcnMsIGxvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgYm94ZXMgPSBuZXdCb3hXaWRnZXRzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKS5hdHRyKCdjbGFzcycsICdib3gnKTtcclxuICAgIHRoaXMuY3JlYXRlQm94ZXMoYm94ZXMsIGxvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG5cclxuICAgIGNvbnN0IG91dGxpZXJzID0gbmV3Qm94V2lkZ2V0cy5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdnJykuYXR0cignY2xhc3MnLCAnb3V0bGllcnMnKTtcclxuXHJcblxyXG4gICAgb3V0bGllcnMuc2VsZWN0QWxsKCcub3V0bGllcicpXHJcbiAgICAgIC5kYXRhKGQgPT4gZC5vdXRsaWVycy5tYXAoeCA9PiBbeCwgZC5rZXksIGQuY29sb3JdKSlcclxuICAgICAgLmVudGVyKClcclxuICAgICAgLmNhbGwodGhpcy5jcmVhdGVPdXRsaWVyLCBsb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQsIHRoaXMucG9zaXRpb25PdXRsaWVyKVxyXG4gICAgO1xyXG5cclxuICAgIC8vIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19