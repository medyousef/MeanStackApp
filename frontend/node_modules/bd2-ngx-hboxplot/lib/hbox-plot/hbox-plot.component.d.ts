import { OnInit, AfterViewInit, OnChanges, OnDestroy, NgZone, ChangeDetectorRef, ElementRef, SimpleChanges, EventEmitter } from '@angular/core';
import { Selection } from 'd3';
import { GraphicContext, LookAndFeel } from './hbox-plot.dom';
import { BoxDefinition } from '../hbox-utils/box-dom';
import * as ɵngcc0 from '@angular/core';
export declare class HBoxPlotComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private ngZone;
    private changeDetectorRef;
    /**
     * Necessary to control hiding of the element, otherwise the BBoxes are not defined and labels
     * were not rendered in correct places.
     *
     */
    hidden: boolean;
    data: number[][];
    removed: number[];
    domain: number[];
    palette: string[];
    labels: string[];
    labelsOn: string;
    lookAndFeel: LookAndFeel;
    set sorted(sorting: string);
    sortChanged: boolean;
    colors: EventEmitter<string[]>;
    private d3;
    private parentNativeElement;
    private d3Svg;
    private mainPane;
    private graphicContext;
    private boxUtil;
    sortFunction: (b1: BoxDefinition, b2: BoxDefinition) => number;
    constructor(ngZone: NgZone, changeDetectorRef: ChangeDetectorRef, element: ElementRef);
    /**
     * It is detached from angular to prevent unnecessary change detection
     */
    ngAfterViewInit(): void;
    /**
     * Explicit triggers re-drawing as need to have all the parameters set (so will not redrawn if data came frist and domain later)
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    isDataUpdate(changes: any): boolean;
    initSVG(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Only for testing
     * @param context
     */
    testGraphicContext(context: GraphicContext): void;
    updatePlot(): void;
    prepareDataModel(data: number[][], removed: number[], labels: string[], palette: string[], domain: number[], sortFunction: (b1: BoxDefinition, b2: BoxDefinition) => number): BoxDefinition[];
    updatePalette(data: any[], palette: string[], graphicContext: GraphicContext): GraphicContext;
    colorBoxes(boxes: BoxDefinition[], palette: string[]): void;
    preparePane(data: any[], lookAndFeel: LookAndFeel, graphicContext: GraphicContext): GraphicContext;
    calculateWorkspaceHeight(data: any[], lookAndFeel: LookAndFeel): number;
    labelBoxes(boxes: BoxDefinition[], labels: string[]): void;
    prepareLabels(boxes: BoxDefinition[], mainPane: Selection<SVGGElement, any, null, undefined>, lookAndFeel: LookAndFeel, graphicContext: GraphicContext, labelsOn: string): GraphicContext;
    prepareTooltip(mainPane: Selection<SVGGElement, any, null, undefined>, graphicContext: GraphicContext): GraphicContext;
    showTooltip(v: number, x: any, y: any): void;
    hideTooltip(): void;
    prepareScales(data: BoxDefinition[], domain: number[], lookAndFeel: LookAndFeel, graphicContext: GraphicContext): GraphicContext;
    plotAxisBox(data: BoxDefinition[], domain: number[], lookAndFeel: LookAndFeel, mainPane: Selection<SVGGElement, any, null, undefined>, graphicContext: GraphicContext): GraphicContext;
    initAxisWrapper(mainPane: Selection<SVGGElement, any, null, undefined>): Selection<SVGGElement, any, null, undefined>;
    plotHorizontalScales(domain: number[], lookAndFeel: LookAndFeel, graphicContext: GraphicContext): GraphicContext;
    plotVerticalScales(data: BoxDefinition[], lookAndFeel: LookAndFeel, graphicContext: GraphicContext): GraphicContext;
    plotDataBoxes(boxes: BoxDefinition[], lookAndFeel: LookAndFeel, mainPane: Selection<SVGGElement, any, null, undefined>, graphicContext: GraphicContext): GraphicContext;
    updateBoxWidgets(boxWidgets: Selection<SVGGElement, BoxDefinition, null, undefined>, lookAndFeel: LookAndFeel, graphicContext: GraphicContext): void;
    positionBackdrop(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext): void;
    positionBoxRectangle(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext): void;
    positionMedianLine(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext): void;
    positionMeanLine(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext): void;
    positionOutlier(elm: Selection<SVGGElement, any, null, undefined>, graphicContext: GraphicContext): void;
    createOutlier(elm: Selection<SVGGElement, any, null, undefined>, lookAndFeel: LookAndFeel, graphicContext: GraphicContext, positionOutlierFunction: (elm: Selection<SVGGElement, any, null, undefined>, graphicContext: GraphicContext) => {}): void;
    positionWhiskerLine(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, left: boolean, graphicContext: GraphicContext): void;
    positionWhiskerTip(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, left: boolean, graphicContext: GraphicContext): void;
    updateWhiskers(whiskers: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext): void;
    createWhiskers(whiskers: Selection<SVGGElement, BoxDefinition, null, undefined>, lookAndFeel: LookAndFeel, graphicContext: GraphicContext): void;
    createBoxes(widgets: Selection<SVGGElement, BoxDefinition, null, undefined>, lookAndFeel: LookAndFeel, graphicContext: GraphicContext): void;
    createBoxWidgets(newBoxWidgets: Selection<SVGGElement, BoxDefinition, null, undefined>, lookAndFeel: LookAndFeel, graphicContext: GraphicContext): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HBoxPlotComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HBoxPlotComponent, "bd2-ngx-hbox-plot", never, { "hidden": "hidden"; "removed": "removed"; "domain": "domain"; "palette": "palette"; "labels": "labels"; "labelsOn": "labelsOn"; "lookAndFeel": "lookAndFeel"; "sorted": "sorted"; "data": "data"; }, { "colors": "colors"; }, never, never>;
}

//# sourceMappingURL=hbox-plot.component.d.ts.map