import { Axis } from 'd3-axis';
import { ScaleBand, ScaleLinear } from 'd3-scale';
import { Selection, Transition } from 'd3';
export declare class LookAndFeel {
    vMargin: number;
    hMarginL: number;
    hMarginR: number;
    rowWidth: number;
    rowGap: number;
    transitionTime: number;
    boxStrokeWidth: string;
    boxFillOpacity: number;
    meanStrokeWidth: string;
    labelFont: string;
    labelFillOpacity: number;
    backLabelOpacity: number;
    backdropColor: string;
    backdropOpacity: number;
    whiskerStrokeWidth: string;
    outliersStrokeWidth: string;
    outliersCircleRadius: number;
    outliersFillOpacity: number;
}
export declare let defualtLookAndFeel: () => LookAndFeel;
export declare class GraphicContext {
    transitionOn: boolean;
    transition: Transition<any, any, any, any>;
    workspaceWidth: number;
    workspaceHeight: number;
    axisWrapper: Selection<SVGGElement, any, null, undefined>;
    xScale: ScaleLinear<number, number>;
    xTopAxis: Axis<number | {
        valueOf(): number;
    }>;
    xBottomAxis: Axis<number | {
        valueOf(): number;
    }>;
    yScale: ScaleBand<string>;
    yLeftAxis: Axis<string>;
    yRightAxis: Axis<string>;
    palette: string[];
    dataWrapper: Selection<SVGGElement, any, null, undefined>;
    tooltipWrapper: Selection<SVGGElement, any, null, undefined>;
    tooltipText: Selection<SVGGElement, any, null, undefined>;
    tooltipBox: Selection<SVGGElement, any, null, undefined>;
    labelsWrapper: Selection<SVGGElement, any, null, undefined>;
    backLabelsWrapper: Selection<SVGGElement, any, null, undefined>;
    labelsTimers: any[];
}
export declare function offsetScaleValue(x: number, pixOffset: number, scale: ScaleLinear<number, number>): number;
