{"version":3,"sources":["../../../projects/bd2-ngx-hboxplot/src/lib/d3service/d3.service.ts","../../../projects/bd2-ngx-hboxplot/src/lib/hbox-plot/hbox-plot.dom.ts","../../../projects/bd2-ngx-hboxplot/src/lib/hbox-utils/box-dom.ts","../../../projects/bd2-ngx-hboxplot/src/lib/hbox-utils/box-util.ts","../../../projects/bd2-ngx-hboxplot/src/lib/hbox-utils/color-palette.ts","../../../projects/bd2-ngx-hboxplot/src/lib/hbox-utils/smart-rounding.ts","../../../projects/bd2-ngx-hboxplot/src/lib/hbox-plot/hbox-plot.component.ts","../../../projects/bd2-ngx-hboxplot/src/lib/bd2-ngx-hboxplot.module.ts"],"names":["d3","LookAndFeel","this","vMargin","hMarginL","hMarginR","rowWidth","rowGap","transitionTime","boxStrokeWidth","boxFillOpacity","meanStrokeWidth","labelFont","labelFillOpacity","backLabelOpacity","backdropColor","backdropOpacity","whiskerStrokeWidth","outliersStrokeWidth","outliersCircleRadius","outliersFillOpacity","GraphicContext","labelsTimers","offsetScaleValue","x","pixOffset","scale","r","range","pos","BoxDefinition","outliers","BoxUtil","prototype","dataToBoxes","data","_this","map","v","ix","b","datumToBox","key","box","length","sort","ascending","mean","median","fstQnt","quantile","thrdQnt","iqr","lowWskr","highWskr","i","filter","mockEmptyValues","boxes","missingVal","forEach","undefined","BD2ColorPalette","extendPalette","palette","size","out","push","schemeCategory10","schemeCategory20","SmartRounder","round","value","base","Math","abs","HBoxPlotComponent","ngZone","changeDetectorRef","element","hidden","removed","domain","labels","labelsOn","lookAndFeel","sortChanged","colors","EventEmitter","graphicContext","boxUtil","sortFunction","b1","b2","parentNativeElement","nativeElement","Object","defineProperty","sorting","label","ngAfterViewInit","detach","ngOnChanges","changes","detectChanges","initSVG","sorted","updatePlot","isDataUpdate","d3Svg","d3ParentElement","select","append","attr","ngOnInit","console","error","ngOnDestroy","empty","selectAll","remove","testGraphicContext","context","transitionOn","runOutsideAngular","transition","duration","updatePalette","prepareDataModel","preparePane","prepareScales","plotAxisBox","mainPane","plotDataBoxes","prepareTooltip","prepareLabels","labelBoxes","colorBoxes","next","slice","color","classed","pHeight","calculateWorkspaceHeight","workspaceWidth","workspaceHeight","labelsWrapper","backLabelsWrapper","insert","backLabelsOn","mainLabelsOn","d","exit","newLabels","enter","on","evnt","style","backLabels","newBackLabels","enterUpdate","merge","backEnterUpdate","timer","clearTimeout","setTimeout","bboxes","yScale","bandwidth","text","each","getBBox","elm","telm","y","height","width","tooltipWrapper","tooltipBox","tooltipText","showTooltip","xScale","bbox","node","hideTooltip","scaleLinear","clamp","scaleBand","padding","domainY","axisWrapper","initAxisWrapper","plotHorizontalScales","plotVerticalScales","wrapper","xTopAxis","axisTop","xBottomAxis","axisBottom","call","yLeftAxis","axisLeft","tickFormat","yRightAxis","axisRight","tickValues","dataWrapper","boxWidgets","updateBoxWidgets","newBoxWidgets","createBoxWidgets","positionBackdrop","updateWhiskers","positionBoxRectangle","positionMedianLine","positionMeanLine","createOutlier","positionOutlier","x1","positionOutlierFunction","positionWhiskerLine","left","positionWhiskerTip","whiskers","createWhiskers","createBoxes","widgets","rect","instance","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","template","NgZone","ChangeDetectorRef","ElementRef","Input","Output","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as d3lib from 'd3';\r\n\r\nexport type D3 = typeof d3lib;\r\nexport const d3 = d3lib;\r\n\r\n/**\r\n D3 integration was originally based on the code for npm library: d3-ng2-service\r\n by Tom Wanzek, https://github.com/tomwanzek/d3-ng2-service.\r\n\r\n That package was used during developement and then converted into inline service\r\n to reduce the dependencies and boundle size.\r\n\r\n At some point, I moved to to simpler dependency on d3:\r\n npm install --save d3\r\n npm install --save-dev @types/d3\r\n\r\n and removed the parts from d3-modules.ts as they were causing errors\r\n (not sure how to fix them and also one dependency is easier to maintain).\r\n */\r\n","// import {Transition} from 'd3-transition';\nimport {Axis} from 'd3-axis';\nimport {ScaleBand, ScaleLinear} from 'd3-scale';\nimport {Selection, Transition} from 'd3';\n\n\nexport class LookAndFeel {\n\n  vMargin = 25;\n  hMarginL = 20;\n  hMarginR = 15;\n  rowWidth = 30;\n  rowGap = 0.2;\n\n  transitionTime = 600;\n\n  boxStrokeWidth = '2px';\n  boxFillOpacity = 0.35;\n  meanStrokeWidth = '4px';\n\n  labelFont = '12px';\n  labelFillOpacity = 0.35;\n  backLabelOpacity = 0.30;\n\n  backdropColor = 'white';\n  backdropOpacity = 1;\n\n  whiskerStrokeWidth = '1px';\n\n  outliersStrokeWidth = '1px';\n  outliersCircleRadius = 3;\n  outliersFillOpacity = 0.4;\n}\n\n\nexport let defualtLookAndFeel: () => LookAndFeel = function() {\n  return new LookAndFeel();\n};\n\nexport class GraphicContext {\n\n  /*transitionTime: number;\n\n   get transitionOn(): boolean {\n   return (this.transitionTime && this.transitionTime > 0);\n   };*/\n\n  transitionOn: boolean;\n  transition: Transition<any, any, any, any>;\n\n  workspaceWidth: number;\n  workspaceHeight: number;\n\n  axisWrapper: Selection<SVGGElement, any, null, undefined>;\n  xScale: ScaleLinear<number, number>;\n  xTopAxis: Axis<number | { valueOf(): number }>;\n  xBottomAxis: Axis<number | { valueOf(): number }>;\n\n  yScale: ScaleBand<string>;\n  yLeftAxis: Axis<string>;\n  yRightAxis: Axis<string>;\n\n  palette: string[];\n\n  dataWrapper: Selection<SVGGElement, any, null, undefined>;\n\n  tooltipWrapper: Selection<SVGGElement, any, null, undefined>;\n  tooltipText: Selection<SVGGElement, any, null, undefined>;\n  tooltipBox: Selection<SVGGElement, any, null, undefined>;\n\n  labelsWrapper: Selection<SVGGElement, any, null, undefined>;\n  backLabelsWrapper: Selection<SVGGElement, any, null, undefined>;\n  labelsTimers = [];\n}\n\nexport function offsetScaleValue(x: number, pixOffset: number, scale: ScaleLinear<number, number>) {\n  const r = scale.range();\n  const pos = scale(x) + pixOffset;\n  if (pos < r[0]) {\n    return r[0];\n  } else if (pos > r[1]) {\n    return r[1];\n  }\n  return pos;\n}\n\n\n\n","\nexport class BoxDefinition {\n  median: number;\n  mean: number;\n  fstQnt: number;\n  thrdQnt: number;\n  lowWskr: number;\n  highWskr: number;\n  outliers: number[] = [];\n  ix: number;\n  key: string;\n  label: string;\n  color: string;\n  hidden: boolean;\n}\n","import {BoxDefinition} from './box-dom';\nimport {d3} from '../d3service';\n\nexport class BoxUtil {\n\n  dataToBoxes(data: number[][]): BoxDefinition[] {\n    if (!data) {\n      return [];\n    }\n\n\n    return data.map((v, ix) => {\n      const b = this.datumToBox(v);\n      b.ix = ix;\n      b.key = (ix + 1) + '.';\n      return b;\n    });\n  }\n\n  datumToBox(data: number[]): BoxDefinition {\n\n    const box = new BoxDefinition();\n    if (!data || data.length === 0) {\n      return box;\n    }\n\n    data = data.sort(d3.ascending);\n    box.mean = d3.mean(data);\n    box.median = d3.median(data);\n    box.fstQnt = d3.quantile(data, 0.25);\n    box.thrdQnt = d3.quantile(data, 0.75);\n\n    const iqr = 1.5 * (box.thrdQnt - box.fstQnt);\n    box.lowWskr = box.fstQnt - iqr;\n    box.highWskr = box.thrdQnt + iqr;\n\n    for (let i = 0; i < data.length; i++) {\n      if (data[i] >= box.lowWskr) {\n        box.lowWskr = data[i];\n        break;\n      }\n    }\n\n    for (let i = data.length - 1; i >= 0; i--) {\n      if (data[i] <= box.highWskr) {\n        box.highWskr = data[i];\n        break;\n      }\n    }\n\n\n    box.outliers = data.filter(v => (v < box.lowWskr || v > box.highWskr));\n    return box;\n  }\n\n  mockEmptyValues(boxes: BoxDefinition[], missingVal: number) {\n    boxes.forEach(box => {\n      if (box.mean === undefined || box.mean === null) {\n        box.mean = missingVal;\n        box.median = missingVal;\n        box.fstQnt = missingVal;\n        box.thrdQnt = missingVal;\n        box.lowWskr = missingVal;\n        box.highWskr = missingVal;\n      }\n    });\n  }\n}\n","\r\nexport class BD2ColorPalette {\r\n\r\n  static schemeCategory10 = [\r\n    '#1f77b4',\r\n    '#ff7f0e',\r\n    '#2ca02c',\r\n    '#d62728',\r\n    '#9467bd',\r\n    '#8c564b',\r\n    '#e377c2',\r\n    '#7f7f7f',\r\n    '#bcbd22',\r\n    '#17becf'\r\n  ];\r\n\r\n  static schemeCategory20 = [\r\n'#1f77b4'\r\n, '#aec7e8'\r\n, '#ff7f0e'\r\n, '#ffbb78'\r\n, '#2ca02c'\r\n, '#98df8a'\r\n, '#d62728'\r\n, '#ff9896'\r\n, '#9467bd'\r\n, '#c5b0d5'\r\n, '#8c564b'\r\n, '#c49c94'\r\n, '#e377c2'\r\n, '#f7b6d2'\r\n, '#7f7f7f'\r\n, '#c7c7c7'\r\n, '#bcbd22'\r\n, '#dbdb8d'\r\n, '#17becf'\r\n, '#9edae5'];\r\n\r\n  static extendPalette(palette: string[] | ReadonlyArray<string>, size: number): string[] {\r\n\r\n    if (!palette || palette.length === 0) {\r\n      palette = ['black'];\r\n    }\r\n\r\n    const out = [];\r\n    for (let i = 0; i < size; i++) {\r\n      out.push(palette[i % palette.length]);\r\n    }\r\n    return out;\r\n\r\n  }\r\n\r\n  static palette(size: number): string[] {\r\n    // if (true) return BD2ColorPalette.extendPalette(['#1f77b4'], size);\r\n    if (size <= BD2ColorPalette.schemeCategory10.length) {\r\n      return BD2ColorPalette.extendPalette(BD2ColorPalette.schemeCategory10, size);\r\n    } else {\r\n      return BD2ColorPalette.extendPalette(BD2ColorPalette.schemeCategory20, size);\r\n    }\r\n\r\n  }\r\n}\r\n","\r\nexport class SmartRounder {\r\n\r\n  static round(value: number, base?: number): number {\r\n\r\n    base = base || value;\r\n    base = Math.abs(base);\r\n\r\n    if (base < 0.01) {\r\n      return value;\r\n    }\r\n\r\n    if (base < 1) {\r\n      return Math.round(value * 10000) / 10000;\r\n    }\r\n\r\n    if (base < 1000) {\r\n      return Math.round(value * 100) / 100;\r\n    }\r\n    return Math.round(value);\r\n  }\r\n\r\n\r\n}\r\n","import {\r\n  Component, OnInit, Input, AfterViewInit, OnChanges, OnDestroy, NgZone, ChangeDetectorRef,\r\n  ElementRef, SimpleChanges, ChangeDetectionStrategy, EventEmitter, Output\r\n} from '@angular/core';\r\nimport {D3, d3} from '../d3service';\r\n\r\nimport {Selection} from 'd3';\r\nimport {defualtLookAndFeel, GraphicContext, LookAndFeel, offsetScaleValue} from './hbox-plot.dom';\r\nimport {BoxDefinition} from '../hbox-utils/box-dom';\r\nimport {BoxUtil} from '../hbox-utils/box-util';\r\nimport {BD2ColorPalette} from '../hbox-utils/color-palette';\r\nimport {SmartRounder} from '../hbox-utils/smart-rounding';\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'bd2-ngx-hbox-plot',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n    <div class=\"hbox-plot\" [hidden]=\"hidden\"></div>\r\n  `,\r\n  styles: [\r\n      `\r\n      :host /deep/ .axisWrapper path {\r\n        stroke: gray;\r\n      }\r\n\r\n      :host /deep/ .axisWrapper line {\r\n        stroke: gray;\r\n      }\r\n\r\n      :host /deep/ .axisWrapper text {\r\n        fill: gray;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class HBoxPlotComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * Necessary to control hiding of the element, otherwise the BBoxes are not defined and labels\r\n   * were not rendered in correct places.\r\n   *\r\n   */\r\n  @Input()\r\n  hidden = false;\r\n\r\n\r\n  @Input()\r\n  data: number[][];\r\n\r\n  @Input()\r\n  removed: number[] = [];\r\n\r\n  @Input()\r\n  domain: number[] = [17, 36];\r\n\r\n  @Input()\r\n  palette: string[] = [];\r\n\r\n  @Input()\r\n  labels: string[] = [];\r\n\r\n  @Input()\r\n  labelsOn = 'always'; // trigger //null\r\n\r\n  @Input()\r\n  lookAndFeel = defualtLookAndFeel();\r\n\r\n  @Input() // median, label, null\r\n  set sorted(sorting: string) {\r\n\r\n    if (sorting === 'median') {\r\n      this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) => b1.median - b2.median;\r\n    } else if (sorting === 'label') {\r\n      // console.log(\"N\",navigator.language);\r\n      /*if (navigator.language) {\r\n       this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) =>\r\n       b1.label.localeCompare(b2.label, navigator.language, {sensitivity: 'case'});\r\n       } else {\r\n       this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) => b1.label.localeCompare(b2.label);\r\n       };*/\r\n      this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) => {\r\n        if (b1.label === b2.label) {\r\n          return 0;\r\n        }\r\n        if (b1.label < b2.label) {\r\n          return -1;\r\n        }\r\n        return 1;\r\n      };\r\n    } else {\r\n      this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) => b1.ix - b2.ix;\r\n    }\r\n  }\r\n\r\n\r\n  sortChanged = false;\r\n\r\n  @Output()\r\n  colors = new EventEmitter<string[]>();\r\n\r\n  private d3: D3;\r\n  private parentNativeElement: any;\r\n  private d3Svg: Selection<SVGSVGElement, any, null, undefined>;\r\n  // private removedSVG: Selection<SVGSVGElement, any, null, undefined>;\r\n\r\n  private mainPane: Selection<SVGGElement, any, null, undefined>;\r\n\r\n  private graphicContext = new GraphicContext();\r\n  private boxUtil = new BoxUtil();\r\n\r\n  sortFunction = function(b1: BoxDefinition, b2: BoxDefinition) {\r\n    return b1.ix - b2.ix;\r\n  };\r\n\r\n\r\n  constructor(private ngZone: NgZone, private changeDetectorRef: ChangeDetectorRef, element: ElementRef) {\r\n    this.d3 = d3;\r\n    this.parentNativeElement = element.nativeElement;\r\n\r\n  }\r\n\r\n  /**\r\n   * It is detached from angular to prevent unnecessary change detection\r\n   */\r\n  ngAfterViewInit() {\r\n    this.changeDetectorRef.detach();\r\n    // console.log(\"AFI\");\r\n  }\r\n\r\n  /**\r\n   * Explicit triggers re-drawing as need to have all the parameters set (so will not redrawn if data came frist and domain later)\r\n   * @param changes\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n\r\n    // console.log(\"Changes\", changes);\r\n\r\n    // otherwise the hidden on inner div was not updated\r\n    this.changeDetectorRef.detectChanges();\r\n\r\n\r\n    this.initSVG();\r\n\r\n    // this.handleHiding();\r\n\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.sortChanged = changes.sorted !== undefined;\r\n\r\n    if (!this.hidden) {\r\n      this.updatePlot();\r\n    }\r\n  }\r\n\r\n  isDataUpdate(changes: any): boolean {\r\n\r\n    return (changes.data || changes.removed || changes.domain || changes.palette || changes.labels );\r\n  }\r\n\r\n  initSVG() {\r\n    if (!this.d3Svg) {\r\n      const d3ParentElement = this.d3.select(this.parentNativeElement);\r\n      this.d3Svg = d3ParentElement.select('.hbox-plot').append<SVGSVGElement>('svg');\r\n      this.d3Svg.attr('width', '0');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.parentNativeElement !== null) {\r\n\r\n\r\n    } else {\r\n      console.error('Missing parrent element for the component');\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.d3Svg && this.d3Svg.empty && !this.d3Svg.empty()) {\r\n      this.d3Svg.selectAll('*').remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Only for testing\r\n   * @param context\r\n   */\r\n  testGraphicContext(context: GraphicContext) {\r\n    this.graphicContext = context;\r\n  }\r\n\r\n  /* Not needed any more, the hidding is achieved by simple div hidden attribute\r\n   // and the problem with labels background rendering is solved using delayed rendering with a timer.\r\n   handleHiding() {\r\n   if (this.hidden) {\r\n   this.removed = this.d3Svg.remove();\r\n   } else {\r\n   if (this.removed) {\r\n   this.d3.select(this.parentNativeElement)\r\n   .select('.hbox-plot')\r\n   .append(() => this.d3Svg.node());\r\n   this.removed = undefined;\r\n   }\r\n   }\r\n\r\n   }*/\r\n\r\n  updatePlot() {\r\n\r\n    // this.graphicContext.transitionTime = this.lookAndFeel.transitionTime;\r\n\r\n    if (this.lookAndFeel.transitionTime > 0) {\r\n      this.graphicContext.transitionOn = true;\r\n      this.ngZone.runOutsideAngular(() => {\r\n        this.graphicContext.transition = (this.d3 as any).transition().duration(this.lookAndFeel.transitionTime);\r\n      });\r\n    } else {\r\n      this.graphicContext.transitionOn = false;\r\n      this.graphicContext.transition = undefined;\r\n    }\r\n\r\n    this.graphicContext = this.updatePalette(this.data, this.palette, this.graphicContext);\r\n\r\n    let boxes = this.prepareDataModel(this.data, this.removed, this.labels, this.graphicContext.palette,\r\n      this.domain, this.sortFunction);\r\n\r\n    boxes = boxes.filter(b => !b.hidden);\r\n\r\n    this.graphicContext = this.preparePane(boxes, this.lookAndFeel, this.graphicContext);\r\n\r\n    this.graphicContext = this.prepareScales(boxes, this.domain, this.lookAndFeel, this.graphicContext);\r\n\r\n    this.graphicContext = this.plotAxisBox(boxes, this.domain, this.lookAndFeel, this.mainPane, this.graphicContext);\r\n\r\n\r\n    this.graphicContext = this.plotDataBoxes(boxes, this.lookAndFeel, this.mainPane, this.graphicContext);\r\n\r\n    this.graphicContext = this.prepareTooltip(this.mainPane, this.graphicContext);\r\n\r\n    this.graphicContext = this.prepareLabels(boxes, this.mainPane, this.lookAndFeel, this.graphicContext, this.labelsOn);\r\n\r\n  }\r\n\r\n  prepareDataModel(data: number[][], removed: number[], labels: string[], palette: string[], domain: number[],\r\n                   sortFunction: (b1: BoxDefinition, b2: BoxDefinition) => number): BoxDefinition[] {\r\n\r\n    let boxes = this.boxUtil.dataToBoxes(data);\r\n\r\n    this.boxUtil.mockEmptyValues(boxes, domain[1]);\r\n    this.labelBoxes(boxes, labels);\r\n\r\n    this.colorBoxes(boxes, palette);\r\n\r\n    removed.forEach(ix => {\r\n      if (boxes[ix]) {\r\n        boxes[ix].hidden = true;\r\n      }\r\n    });\r\n\r\n    boxes = boxes.sort(sortFunction);\r\n    return boxes;\r\n\r\n  }\r\n\r\n\r\n  updatePalette(data: any[], palette: string[], graphicContext: GraphicContext): GraphicContext {\r\n\r\n    if (!palette || palette.length === 0) {\r\n      graphicContext.palette = BD2ColorPalette.palette(data.length);\r\n    } else {\r\n      graphicContext.palette = BD2ColorPalette.extendPalette(palette, data.length);\r\n\r\n    }\r\n    this.colors.next(graphicContext.palette.slice());\r\n\r\n    return graphicContext;\r\n  }\r\n\r\n  colorBoxes(boxes: BoxDefinition[], palette: string[]) {\r\n    boxes.forEach(b => b.color = palette[b.ix]);\r\n  }\r\n\r\n\r\n  preparePane(data: any[], lookAndFeel: LookAndFeel, graphicContext: GraphicContext): GraphicContext {\r\n\r\n    // console.log(\"PP\",data);\r\n\r\n    if (!this.mainPane) {\r\n      // let d3ParentElement = this.d3.select(this.parentNativeElement);\r\n      // this.d3Svg = d3ParentElement.select('.hbox-plot').append<SVGSVGElement>('svg');\r\n      this.d3Svg.attr('width', '100%');\r\n\r\n      this.mainPane = this.d3Svg.append<SVGGElement>('g');\r\n      this.mainPane.classed('mainPane', true);\r\n\r\n    }\r\n\r\n    const pWidth = 500;\r\n    const pHeight = this.calculateWorkspaceHeight(data, lookAndFeel) + 2 * lookAndFeel.vMargin;\r\n\r\n    const elm = (graphicContext.transitionOn ? this.d3Svg.transition(graphicContext.transition) : this.d3Svg);\r\n    elm.attr('viewBox', '0 0 ' + pWidth + ' ' + pHeight);\r\n    this.mainPane.attr('transform', 'translate(' + lookAndFeel.hMarginL + ',' + lookAndFeel.vMargin + ')');\r\n    // .attr('transform', 'translate(' + (pWidth / 2) + ',' + (pHeight / 2) + ')'); //moves 0,0 of the pain to the middle of the graphics\r\n\r\n    graphicContext.workspaceWidth = pWidth - lookAndFeel.hMarginL - lookAndFeel.hMarginR;\r\n    graphicContext.workspaceHeight = pHeight - 2 * lookAndFeel.vMargin;\r\n\r\n    return graphicContext;\r\n\r\n  }\r\n\r\n  calculateWorkspaceHeight(data: any[], lookAndFeel: LookAndFeel) {\r\n    return lookAndFeel.rowWidth * data.length;\r\n\r\n  }\r\n\r\n\r\n  labelBoxes(boxes: BoxDefinition[], labels: string[]) {\r\n    if (!labels) {\r\n      labels = [];\r\n    }\r\n\r\n\r\n    boxes.forEach((b, ix) => {\r\n      b.label = labels[ix] ? labels[ix] : '' + (ix + 1);\r\n    });\r\n  }\r\n\r\n  prepareLabels(boxes: BoxDefinition[], mainPane: Selection<SVGGElement, any, null, undefined>, lookAndFeel: LookAndFeel,\r\n                graphicContext: GraphicContext, labelsOn: string): GraphicContext {\r\n\r\n    if (!graphicContext.labelsWrapper) {\r\n      graphicContext.labelsWrapper = mainPane.append<SVGGElement>('g')\r\n        .classed('labelsWrapper', true);\r\n    }\r\n\r\n    if (!graphicContext.backLabelsWrapper) {\r\n      graphicContext.backLabelsWrapper = mainPane.insert<SVGGElement>('g', 'g.dataWrapper')\r\n        .classed('backLabelsWrapper', true);\r\n    }\r\n\r\n    const backLabelsOn = labelsOn === 'always';\r\n    const mainLabelsOn = labelsOn === 'always' || labelsOn === 'trigger';\r\n\r\n\r\n    const labels = graphicContext.labelsWrapper.selectAll('g.yLabel')\r\n      .data(mainLabelsOn ? boxes : [], (d: BoxDefinition) => d.key);\r\n\r\n    labels.exit().remove();\r\n\r\n    const newLabels = labels.enter()\r\n      .append<SVGGElement>('g')\r\n      .classed('yLabel', true);\r\n\r\n    this.ngZone.runOutsideAngular(() => {\r\n      newLabels.on('mouseover', function(evnt: MouseEvent, d: BoxDefinition) {\r\n        d3.select(this)\r\n          .selectAll('.yLabel')\r\n          // .style(\"visibility\", \"visible\");\r\n          .style('display', null);\r\n      }).on('mouseout', function() {\r\n        d3.select(this)\r\n          .selectAll('.yLabel')\r\n          // .style(\"visibility\", \"hidden\");\r\n          .style('display', 'none');\r\n      });\r\n    });\r\n\r\n    newLabels.append<SVGGElement>('rect')\r\n      .attr('class', 'yTrigger')\r\n      .style('fill-opacity', 1)\r\n    ;\r\n\r\n    newLabels.append<SVGGElement>('rect')\r\n      .attr('class', 'yLabel')\r\n      .style('fill-opacity', 0.35)\r\n      // .style(\"visibility\", \"hidden\");\r\n      .style('display', 'none');\r\n\r\n\r\n    newLabels.append<SVGGElement>('text')\r\n      .attr('class', 'yLabel')\r\n      .attr('text-anchor', 'left')\r\n      .attr('dominant-baseline', 'central')\r\n      .style('font-size', lookAndFeel.labelFont)\r\n      .style('opacity', 1)\r\n      .attr('x', 5)\r\n    // .style(\"visibility\", \"hidden\");\r\n    // .style(\"display\", \"none\");\r\n    ;\r\n\r\n    const backLabels = graphicContext.backLabelsWrapper.selectAll('g.yLabel')\r\n      .data(backLabelsOn ? boxes : [], (d: BoxDefinition) => d.key);\r\n\r\n    backLabels.exit().remove();\r\n\r\n    const newBackLabels = backLabels.enter()\r\n      .append<SVGGElement>('g')\r\n      .classed('yLabel', true);\r\n\r\n    /*\r\n     newBackLabels.append<SVGGElement>(\"rect\")\r\n     .attr(\"class\", \"yLabel\")\r\n     .style(\"fill-opacity\", 0.05);\r\n     */\r\n\r\n    newBackLabels.append<SVGGElement>('text')\r\n      .attr('class', 'yLabel')\r\n      .attr('text-anchor', 'left')\r\n      .attr('dominant-baseline', 'central')\r\n      .style('font-size', lookAndFeel.labelFont)\r\n      .style('opacity', lookAndFeel.backLabelOpacity)\r\n      .attr('x', 5);\r\n    // .style(\"visibility\", \"hidden\");\r\n\r\n\r\n    const enterUpdate: Selection<SVGSVGElement, BoxDefinition, null, undefined> =\r\n      newLabels.merge(labels as any) as Selection<SVGSVGElement, BoxDefinition, null, undefined>;\r\n\r\n    const backEnterUpdate: Selection<SVGSVGElement, BoxDefinition, null, undefined> =\r\n      newBackLabels.merge(backLabels as any) as Selection<SVGSVGElement, BoxDefinition, null, undefined>;\r\n\r\n    // called with delay to allow, parent divs to component sets their visibility, otherwise the bboxes cannot be calculated\r\n    // and the labels backgrounds and trigers are not rendered correctly\r\n    // it is a hack, but don't know how to do it correctly\r\n    // timers have to be cleared as otherwise saw errors in logs for fast changing input data (like cause by sorting and pagination)\r\n    graphicContext.labelsTimers.forEach( timer => clearTimeout(timer));\r\n    graphicContext.labelsTimers = [];\r\n    const timer = setTimeout(() => {\r\n\r\n\r\n      const bboxes: SVGRect[] = [];\r\n\r\n      enterUpdate.select<SVGSVGElement>('text')\r\n        .style('display', null)\r\n        .attr('y', d => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)\r\n        .text(d => d.label)\r\n        .each(function(d) {\r\n          bboxes.push(this.getBBox());\r\n          // console.log(\"D: \" + d.label, this.getBBox());\r\n        })\r\n        .style('display', 'none');\r\n\r\n\r\n      let elm = backEnterUpdate.select<SVGSVGElement>('text');\r\n      elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm) as any;\r\n      elm\r\n        .attr('y', d => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)\r\n        .text(d => d.label)\r\n      // .style(\"fill\", d => d.color)\r\n      /*.each(function (d) {\r\n       bboxes.push(this.getBBox());\r\n       //console.log(\"D: \" + d.label, this.getBBox());\r\n       });*/\r\n      ;\r\n\r\n      const trigers = enterUpdate.select<SVGSVGElement>('.yTrigger')\r\n        .style('fill', d => d.color)\r\n        .style('stroke', d => d.color);\r\n\r\n\r\n      let telm = trigers.data(bboxes);\r\n      telm = (graphicContext.transitionOn ? telm.transition(graphicContext.transition) : telm) as any;\r\n      telm\r\n        .attr('x', -7)\r\n        .attr('y', b => b.y - 3)\r\n        .attr('width', b => 7)\r\n        .attr('height', b => b.height + 6);\r\n\r\n      const frames = enterUpdate.select<SVGSVGElement>('rect.yLabel')\r\n        .style('fill', d => d.color)\r\n        .style('fill-opacity', lookAndFeel.labelFillOpacity);\r\n\r\n      frames.data(bboxes)\r\n        .attr('x', 0)\r\n        .attr('y', b => b.y - 3)\r\n        .attr('width', b => b.width + 10)\r\n        .attr('height', b => b.height + 7);\r\n\r\n\r\n      /*\r\n       let backFrames = backEnterUpdate.select<SVGSVGElement>(\"rect.yLabel\")\r\n       .style(\"fill\", d => d.color);\r\n\r\n       backFrames.data(bboxes)\r\n       .attr(\"x\", 0)\r\n       .attr(\"y\", b => b.y - 3)\r\n       .attr(\"width\", b => b.width + 10)\r\n       .attr(\"height\", b => b.height + 7);\r\n       */\r\n\r\n    }, 10);\r\n\r\n    graphicContext.labelsTimers.push(timer);\r\n    return graphicContext;\r\n  }\r\n\r\n\r\n  prepareTooltip(mainPane: Selection<SVGGElement, any, null, undefined>, graphicContext: GraphicContext): GraphicContext {\r\n\r\n    if (graphicContext.tooltipWrapper) {\r\n      return graphicContext;\r\n    }\r\n\r\n    graphicContext.tooltipWrapper = mainPane.append<SVGGElement>('g')\r\n      .classed('tooltipWrapper', true);\r\n\r\n    graphicContext.tooltipBox = graphicContext.tooltipWrapper.append<SVGGElement>('rect')\r\n      .style('fill', 'white')\r\n      .style('fill-opacity', 0.8)\r\n      .style('stroke', 'grey')\r\n    // .style(\"visibility\", \"hidden\");\r\n    ;\r\n\r\n    graphicContext.tooltipText = graphicContext.tooltipWrapper.append<SVGGElement>('text')\r\n      .attr('class', 'tooltip')\r\n      // .attr(\"text-anchor\", \"left\")\r\n      .attr('text-anchor', 'middle')\r\n      // .attr(\"alignment-baseline\", \"middle\")\r\n      // .attr(\"alignment-baseline\", \"baseline\")\r\n      // .attr(\"dy\", \"-10px\")\r\n      .style('opacity', 1)\r\n    // .attr(\"dx\", \"0.35em\")\r\n    // .style(\"font-size\", this.lookAndFeel.tooltipFontSize) //\"11px\")\r\n    // .style(\"opacity\", 0)\r\n    ;\r\n\r\n    graphicContext.tooltipWrapper\r\n    // .style(\"visibility\", \"hidden\");\r\n      .style('display', 'none');\r\n\r\n    return graphicContext;\r\n  }\r\n\r\n  showTooltip(v: number, x: any, y: any) {\r\n    // console.log(\"Show: \" + v + \";\" + this.constructor.name);\r\n    // console.log('Show: ' + v + '; ' + x + ': ' + y);\r\n    // console.log('v', SmartRounder.round(v));\r\n    // console.log('x', this.graphicContext.xScale(x));\r\n    // console.log('y', this.graphicContext.yScale(y));\r\n\r\n    if (!this.graphicContext.tooltipText) {\r\n      return;\r\n    }\r\n\r\n    this.graphicContext.tooltipText\r\n      .attr('x', this.graphicContext.xScale(x))\r\n      .attr('y', this.graphicContext.yScale(y))\r\n      .text(SmartRounder.round(v))\r\n    // .transition().duration(this.lookAndFeel.baseTransitionsTime / 2)\r\n    // .style('opacity', 1);\r\n    ;\r\n\r\n    // I have to change the display here even before the box is ready as\r\n    // in firefox the getBBox was not working if called with display none\r\n    // giving NS_ERROR_FAILURE 2147500037\r\n    this.graphicContext.tooltipWrapper\r\n      // .style(\"visibility\", \"visible\");\r\n      .style('display', null);\r\n\r\n    const bbox = this.graphicContext.tooltipText.node().getBBox();\r\n\r\n    this.graphicContext.tooltipBox\r\n      .attr('x', bbox.x - 3)\r\n      .attr('y', bbox.y - 2)\r\n      .attr('width', bbox.width + 6)\r\n      .attr('height', bbox.height + 4);\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  hideTooltip() {\r\n    // console.log(\"Hide: \");\r\n    if (!this.graphicContext.tooltipText) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.graphicContext.tooltipWrapper\r\n    // .style(\"visibility\", \"hidden\");\r\n      .style('display', 'none');\r\n\r\n\r\n    // this.graphicContext.tooltipText\r\n    // .transition().duration(this.lookAndFeel.baseTransitionsTime / 2)\r\n    // .style(\"opacity\", 0);\r\n  }\r\n\r\n  prepareScales(data: BoxDefinition[], domain: number[], lookAndFeel: LookAndFeel,\r\n                graphicContext: GraphicContext): GraphicContext {\r\n\r\n    if (!graphicContext.xScale) {\r\n      graphicContext.xScale = d3.scaleLinear()\r\n        .clamp(true);\r\n    }\r\n\r\n    graphicContext.xScale\r\n      .domain(domain)\r\n      .range([0, graphicContext.workspaceWidth]);\r\n\r\n    if (!graphicContext.yScale) {\r\n      graphicContext.yScale = d3.scaleBand()\r\n        .padding(lookAndFeel.rowGap)\r\n      ;\r\n    }\r\n\r\n    const domainY = data.map((d) => d.key);\r\n\r\n    graphicContext.yScale\r\n      .domain(domainY)\r\n      .range([0, graphicContext.workspaceHeight]);\r\n\r\n\r\n    return graphicContext;\r\n  }\r\n\r\n  plotAxisBox(data: BoxDefinition[], domain: number[], lookAndFeel: LookAndFeel, mainPane: Selection<SVGGElement, any, null, undefined>,\r\n              graphicContext: GraphicContext): GraphicContext {\r\n\r\n    if (!graphicContext.axisWrapper) {\r\n      graphicContext.axisWrapper = this.initAxisWrapper(mainPane);\r\n    }\r\n\r\n    graphicContext = this.plotHorizontalScales(domain, lookAndFeel, graphicContext);\r\n    graphicContext = this.plotVerticalScales(data, lookAndFeel, graphicContext);\r\n\r\n    return graphicContext;\r\n\r\n  }\r\n\r\n  initAxisWrapper(mainPane: Selection<SVGGElement, any, null, undefined>): Selection<SVGGElement, any, null, undefined> {\r\n\r\n    let wrapper = mainPane.select<SVGGElement>('.axisWrapper');\r\n    if (wrapper.size() === 0) {\r\n      wrapper = mainPane.append<SVGGElement>('g').attr('class', 'axisWrapper');\r\n\r\n      wrapper.append('g').attr('class', 'xTopAxis');\r\n      wrapper.append('g').attr('class', 'xBottomAxis');\r\n      wrapper.append('g').attr('class', 'yLeftAxis');\r\n      wrapper.append('g').attr('class', 'yRightAxis');\r\n\r\n    }\r\n    return wrapper;\r\n  }\r\n\r\n  plotHorizontalScales(domain: number[], lookAndFeel: LookAndFeel, graphicContext: GraphicContext): GraphicContext {\r\n\r\n\r\n    if (!graphicContext.xTopAxis) {\r\n      graphicContext.xTopAxis = d3.axisTop(graphicContext.xScale);\r\n    }\r\n\r\n    if (!graphicContext.xBottomAxis) {\r\n      graphicContext.xBottomAxis = d3.axisBottom(graphicContext.xScale);\r\n    }\r\n\r\n\r\n    graphicContext.axisWrapper\r\n      .select('g.xTopAxis')\r\n      .call(graphicContext.xTopAxis);\r\n\r\n    let elm = graphicContext.axisWrapper.select('g.xBottomAxis') as any;\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);\r\n    elm\r\n      .attr('transform', 'translate(0,' + graphicContext.workspaceHeight + ')')\r\n      .call(graphicContext.xBottomAxis);\r\n\r\n    return graphicContext;\r\n\r\n  }\r\n\r\n  plotVerticalScales(data: BoxDefinition[], lookAndFeel: LookAndFeel, graphicContext: GraphicContext): GraphicContext {\r\n\r\n\r\n    if (!graphicContext.yLeftAxis) {\r\n      graphicContext.yLeftAxis = d3.axisLeft(graphicContext.yScale)\r\n        .tickFormat(() => '')\r\n      ;\r\n    }\r\n\r\n    if (!graphicContext.yRightAxis) {\r\n      graphicContext.yRightAxis = d3.axisRight(graphicContext.yScale)\r\n        .tickValues([])\r\n      ;\r\n    }\r\n\r\n    let elm = graphicContext.axisWrapper.select('g.yLeftAxis') as any;\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);\r\n    elm\r\n      .call(graphicContext.yLeftAxis);\r\n\r\n\r\n    elm = graphicContext.axisWrapper.select('g.yRightAxis')\r\n      .attr('transform', 'translate(' + graphicContext.workspaceWidth + ',0)') as any;\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);\r\n    elm\r\n      .call(graphicContext.yRightAxis);\r\n\r\n    return graphicContext;\r\n\r\n  }\r\n\r\n\r\n  plotDataBoxes(boxes: BoxDefinition[], lookAndFeel: LookAndFeel, mainPane: Selection<SVGGElement, any, null, undefined>,\r\n                graphicContext: GraphicContext): GraphicContext {\r\n\r\n    if (!graphicContext.dataWrapper) {\r\n      graphicContext.dataWrapper = mainPane.append<SVGGElement>('g').attr('class', 'dataWrapper');\r\n    }\r\n\r\n\r\n\r\n    let boxWidgets = graphicContext.dataWrapper.selectAll('.boxWidget') as Selection<SVGGElement, BoxDefinition, null, undefined>;\r\n\r\n    boxWidgets = boxWidgets.data(boxes, d => d.key);\r\n\r\n\r\n    this.updateBoxWidgets(boxWidgets, lookAndFeel, graphicContext);\r\n\r\n    const newBoxWidgets = boxWidgets.enter()\r\n      .append<SVGGElement>('g').attr('class', 'boxWidget');\r\n\r\n\r\n    this.createBoxWidgets(newBoxWidgets, lookAndFeel, graphicContext);\r\n\r\n    boxWidgets.exit().remove();\r\n\r\n\r\n    return graphicContext;\r\n  }\r\n\r\n  updateBoxWidgets(boxWidgets: Selection<SVGGElement, BoxDefinition, null, undefined>,\r\n                   lookAndFeel: LookAndFeel, graphicContext: GraphicContext) {\r\n\r\n    // this.ngZone.runOutsideAngular(() => {\r\n\r\n    boxWidgets.select('rect.backdrop')\r\n      .call(this.positionBackdrop, graphicContext);\r\n\r\n    this.updateWhiskers(boxWidgets.select('g.whiskers') as any, graphicContext);\r\n\r\n    boxWidgets.select('g.box rect')\r\n      .call(this.positionBoxRectangle, graphicContext);\r\n\r\n    boxWidgets.select('g.box line.medianline')\r\n      .call(this.positionMedianLine, graphicContext);\r\n\r\n    boxWidgets.select('g.box line.meanline')\r\n      .call(this.positionMeanLine, graphicContext);\r\n\r\n    const out = boxWidgets.select('g.outliers').selectAll('.outlier')\r\n      .data(d => d.outliers.map(x => [x, d.key, d.color]));\r\n\r\n    out.enter()\r\n      .call(this.createOutlier, lookAndFeel, graphicContext, this.positionOutlier);\r\n\r\n    out.call(this.positionOutlier, graphicContext);\r\n\r\n    out.exit().remove();\r\n\r\n    // });\r\n\r\n  }\r\n\r\n\r\n  positionBackdrop(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext) {\r\n\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm) as any;\r\n    elm\r\n      .attr('x', (d) => offsetScaleValue(d.lowWskr, -5, graphicContext.xScale))\r\n      .attr('y', (d) => {\r\n        return graphicContext.yScale(d.key);\r\n      })\r\n      .attr('width', (d) => {\r\n        const x1 = offsetScaleValue(d.lowWskr, -5, graphicContext.xScale);\r\n        const x2 = offsetScaleValue(d.highWskr, +5, graphicContext.xScale);\r\n        return x2 - x1;\r\n      })\r\n      .attr('height', (d) => {\r\n        return graphicContext.yScale.bandwidth();\r\n      })\r\n    // .style(\"stroke\", d => d.color)\r\n    // .style(\"fill\", d => d.color)\r\n    ;\r\n\r\n  }\r\n\r\n  positionBoxRectangle(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext) {\r\n\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm) as any;\r\n    elm\r\n      .attr('x', (d) => graphicContext.xScale(d.fstQnt))\r\n      .attr('y', (d) => {\r\n        return graphicContext.yScale(d.key);\r\n      })\r\n      .attr('width', (d) => (graphicContext.xScale(d.thrdQnt) - graphicContext.xScale(d.fstQnt)))\r\n      .attr('height', (d) => {\r\n        return graphicContext.yScale.bandwidth();\r\n      })\r\n      .style('stroke', d => d.color)\r\n      .style('fill', d => d.color);\r\n\r\n  }\r\n\r\n  positionMedianLine(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext) {\r\n\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm) as any;\r\n    elm\r\n      .attr('x1', (d, i) => graphicContext.xScale(d.median))\r\n      .attr('y1', (d, i) => graphicContext.yScale(d.key))\r\n      .attr('x2', (d, i) => graphicContext.xScale(d.median))\r\n      .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())\r\n      .style('stroke', d => d.color)\r\n      // .style(\"visibility\", d => d.mean === d.median ? \"hidden\" : \"visible\");\r\n      .style('display', d => d.mean === d.median ? 'none' : null);\r\n\r\n\r\n\r\n  }\r\n\r\n  positionMeanLine(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, graphicContext: GraphicContext) {\r\n\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm) as any;\r\n    elm\r\n      .attr('x1', (d, i) => graphicContext.xScale(d.mean))\r\n      .attr('y1', (d, i) => graphicContext.yScale(d.key))\r\n      .attr('x2', (d, i) => graphicContext.xScale(d.mean))\r\n      .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())\r\n      .style('stroke', d => d.color);\r\n  }\r\n\r\n  positionOutlier(elm: Selection<SVGGElement, any, null, undefined>, graphicContext: GraphicContext) {\r\n\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm) as any;\r\n    elm.attr('cx', d => graphicContext.xScale(d[0]))\r\n      .attr('cy', d => graphicContext.yScale(d[1]) + graphicContext.yScale.bandwidth() / 2)\r\n      .style('stroke', d => d[2])\r\n      .style('fill', d => d[2]);\r\n\r\n  }\r\n\r\n\r\n  createOutlier(elm: Selection<SVGGElement, any, null, undefined>, lookAndFeel: LookAndFeel, graphicContext: GraphicContext,\r\n                positionOutlierFunction: (elm: Selection<SVGGElement, any, null, undefined>, graphicContext: GraphicContext) => {}) {\r\n\r\n\r\n    elm\r\n      .append<SVGGElement>('circle')\r\n      .attr('class', 'outlier')\r\n      .attr('r', lookAndFeel.outliersCircleRadius)\r\n      .style('stroke-width', lookAndFeel.outliersStrokeWidth)\r\n      .style('fill-opacity', lookAndFeel.outliersFillOpacity)\r\n      .call(positionOutlierFunction, graphicContext)\r\n    ;\r\n\r\n  }\r\n\r\n  positionWhiskerLine(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, left: boolean, graphicContext: GraphicContext) {\r\n\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm) as any;\r\n    elm\r\n      .attr('x1', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.thrdQnt))\r\n      .attr('y1', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)\r\n      .attr('x2', (d, i) => left ? graphicContext.xScale(d.fstQnt) : graphicContext.xScale(d.highWskr))\r\n      .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)\r\n      .style('stroke', d => d.color)\r\n      // .style(\"visibility\", d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? \"hidden\" : \"visible\");\r\n      .style('display', d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? 'none' : null);\r\n\r\n\r\n  }\r\n\r\n  positionWhiskerTip(elm: Selection<SVGGElement, BoxDefinition, null, undefined>, left: boolean, graphicContext: GraphicContext) {\r\n\r\n    elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm) as any;\r\n    elm\r\n      .attr('x1', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.highWskr))\r\n      .attr('y1', (d, i) => graphicContext.yScale(d.key))\r\n      .attr('x2', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.highWskr))\r\n      .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())\r\n      .style('stroke', d => d.color)\r\n      // .style(\"visibility\", d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? \"hidden\" : \"visible\");\r\n      .style('display', d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? 'none' : null);\r\n\r\n\r\n\r\n  }\r\n\r\n  updateWhiskers(whiskers: Selection<SVGGElement, BoxDefinition, null, undefined>,\r\n                 graphicContext: GraphicContext) {\r\n\r\n    whiskers.select('line.whiskerlineL')\r\n      .call(this.positionWhiskerLine, true, graphicContext);\r\n\r\n    whiskers.select('line.whiskerlineR')\r\n      .call(this.positionWhiskerLine, false, graphicContext);\r\n\r\n    whiskers.select('line.whiskertipL')\r\n      .call(this.positionWhiskerTip, true, graphicContext);\r\n\r\n    whiskers.select('line.whiskertipR')\r\n      .call(this.positionWhiskerTip, false, graphicContext);\r\n\r\n  }\r\n\r\n  createWhiskers(whiskers: Selection<SVGGElement, BoxDefinition, null, undefined>,\r\n                 lookAndFeel: LookAndFeel, graphicContext: GraphicContext) {\r\n\r\n\r\n    const lwhiskr = whiskers.append('line')\r\n      .attr('class', 'whiskerlineL')\r\n      .style('stroke-width', lookAndFeel.whiskerStrokeWidth)\r\n      .style('stroke-dasharray', '4 3')\r\n      .call(this.positionWhiskerLine, true, graphicContext)\r\n    ;\r\n    const rwhiskr = whiskers.append('line')\r\n      .attr('class', 'whiskerlineR')\r\n      .style('stroke-width', lookAndFeel.whiskerStrokeWidth)\r\n      .style('stroke-dasharray', '4 3')\r\n      .call(this.positionWhiskerLine, false, graphicContext)\r\n    ;\r\n\r\n    const lTip = whiskers.append('line')\r\n      .attr('class', 'whiskertipL')\r\n      .style('stroke-width', lookAndFeel.whiskerStrokeWidth)\r\n      .call(this.positionWhiskerTip, true, graphicContext)\r\n    ;\r\n\r\n    const rTip = whiskers.append('line')\r\n      .attr('class', 'whiskertipR')\r\n      .style('stroke-width', lookAndFeel.whiskerStrokeWidth)\r\n      .call(this.positionWhiskerTip, false, graphicContext)\r\n    ;\r\n\r\n\r\n  }\r\n\r\n  createBoxes(widgets: Selection<SVGGElement, BoxDefinition, null, undefined>,\r\n              lookAndFeel: LookAndFeel, graphicContext: GraphicContext) {\r\n\r\n\r\n    const rect = widgets.append('rect')\r\n      .attr('class', 'box')\r\n      .style('stroke-width', lookAndFeel.boxStrokeWidth)\r\n      .style('fill-opacity', lookAndFeel.boxFillOpacity)\r\n      .call(this.positionBoxRectangle, graphicContext);\r\n\r\n\r\n    const median = widgets.append('line')\r\n      .attr('class', 'medianline')\r\n      .style('stroke-width', lookAndFeel.boxStrokeWidth)\r\n      .call(this.positionMedianLine, graphicContext);\r\n\r\n    const instance = this;\r\n\r\n    this.ngZone.runOutsideAngular(() => {\r\n      rect.on('mouseover', function(evnt: MouseEvent, d: BoxDefinition) {\r\n        instance.showTooltip(d.median, d.median, d.key);\r\n      })\r\n        .on('mouseout', function() {\r\n          instance.hideTooltip();\r\n        });\r\n\r\n      median.on('mouseover', function(evnt: MouseEvent, d: BoxDefinition) {\r\n        instance.showTooltip(d.median, d.median, d.key);\r\n      })\r\n        .on('mouseout', function() {\r\n          instance.hideTooltip();\r\n        });\r\n\r\n    });\r\n\r\n    const mean = widgets\r\n      .append('line')\r\n      .attr('class', 'meanline')\r\n      .style('stroke-width', lookAndFeel.meanStrokeWidth)\r\n      .style('stroke-dasharray', '4 2')\r\n      .call(this.positionMeanLine, graphicContext)\r\n    ;\r\n\r\n    // has to be outside angular, to prevent detection\r\n    this.ngZone.runOutsideAngular(() => {\r\n      mean\r\n        .on('mouseover', function(evnt: MouseEvent, d: BoxDefinition) {\r\n          instance.showTooltip(d.mean, d.mean, d.key);\r\n        })\r\n        .on('mouseout', function() {\r\n          instance.hideTooltip();\r\n        });\r\n\r\n    });\r\n\r\n  }\r\n\r\n  createBoxWidgets(newBoxWidgets: Selection<SVGGElement, BoxDefinition, null, undefined>,\r\n                   lookAndFeel: LookAndFeel, graphicContext: GraphicContext) {\r\n\r\n    // this.ngZone.runOutsideAngular(() => {\r\n\r\n    const instance = this;\r\n\r\n    const backdrops = newBoxWidgets.append<SVGGElement>('rect').attr('class', 'backdrop')\r\n    // .style(\"stroke-width\", lookAndFeel.boxStrokeWidth)\r\n      .style('fill-opacity', lookAndFeel.backdropOpacity)\r\n      .style('fill', lookAndFeel.backdropColor)\r\n      .call(this.positionBackdrop, graphicContext);\r\n\r\n\r\n    const whiskers = newBoxWidgets.append<SVGGElement>('g').attr('class', 'whiskers');\r\n\r\n    this.createWhiskers(whiskers, lookAndFeel, graphicContext);\r\n\r\n    const boxes = newBoxWidgets.append<SVGGElement>('g').attr('class', 'box');\r\n    this.createBoxes(boxes, lookAndFeel, graphicContext);\r\n\r\n\r\n    const outliers = newBoxWidgets.append<SVGGElement>('g').attr('class', 'outliers');\r\n\r\n\r\n    outliers.selectAll('.outlier')\r\n      .data(d => d.outliers.map(x => [x, d.key, d.color]))\r\n      .enter()\r\n      .call(this.createOutlier, lookAndFeel, graphicContext, this.positionOutlier)\r\n    ;\r\n\r\n    // });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport {HBoxPlotComponent} from './hbox-plot/hbox-plot.component';\n\n\n\n@NgModule({\n  declarations: [HBoxPlotComponent],\n  imports: [\n  ],\n  exports: [HBoxPlotComponent]\n})\nexport class BD2NgxHBoxplotModule { }\n"]}